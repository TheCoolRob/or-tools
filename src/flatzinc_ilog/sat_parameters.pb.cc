// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sat_parameters.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sat_parameters.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace operations_research {
namespace sat {

namespace {

const ::google::protobuf::Descriptor* SatParameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SatParameters_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SatParameters_VariableOrder_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SatParameters_Polarity_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SatParameters_LiteralOrdering_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SatParameters_ConflictMinimizationAlgorithm_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SatParameters_BinaryMinizationAlgorithm_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SatParameters_ClauseProtection_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SatParameters_ClauseOrdering_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SatParameters_RestartAlgorithm_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SatParameters_MaxSatAssumptionOrder_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SatParameters_MaxSatStratificationAlgorithm_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_sat_5fparameters_2eproto() {
  protobuf_AddDesc_sat_5fparameters_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sat_parameters.proto");
  GOOGLE_CHECK(file != NULL);
  SatParameters_descriptor_ = file->message_type(0);
  static const int SatParameters_offsets_[54] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, preferred_variable_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, initial_polarity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, use_phase_saving_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, random_polarity_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, random_branches_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, literal_ordering_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, minimization_algorithm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, binary_minimization_algorithm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, subsumption_during_conflict_analysis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, clause_cleanup_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, clause_cleanup_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, clause_cleanup_protection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, clause_cleanup_lbd_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, clause_cleanup_ordering_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, pb_cleanup_increment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, pb_cleanup_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, variable_activity_decay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, max_variable_activity_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, glucose_max_decay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, glucose_decay_increment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, glucose_decay_increment_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, clause_activity_decay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, max_clause_activity_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, use_glucose_bump_again_strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, restart_algorithms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, default_restart_algorithms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, luby_restart_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, restart_running_window_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, restart_dl_average_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, restart_lbd_average_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, use_blocking_restart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, blocking_restart_window_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, blocking_restart_multiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, num_conflicts_before_strategy_changes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, strategy_change_increase_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, max_time_in_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, max_deterministic_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, max_number_of_conflicts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, max_memory_in_mb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, treat_binary_clauses_separately_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, random_seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, log_search_progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, unsat_proof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, use_pb_resolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, minimize_reduction_during_pb_resolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, count_assumption_levels_in_lbd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, presolve_bve_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, presolve_bve_clause_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, presolve_probing_deterministic_time_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, use_optimization_hints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, minimize_core_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, max_sat_assumption_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, max_sat_reverse_assumption_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, max_sat_stratification_),
  };
  SatParameters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SatParameters_descriptor_,
      SatParameters::default_instance_,
      SatParameters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatParameters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SatParameters));
  SatParameters_VariableOrder_descriptor_ = SatParameters_descriptor_->enum_type(0);
  SatParameters_Polarity_descriptor_ = SatParameters_descriptor_->enum_type(1);
  SatParameters_LiteralOrdering_descriptor_ = SatParameters_descriptor_->enum_type(2);
  SatParameters_ConflictMinimizationAlgorithm_descriptor_ = SatParameters_descriptor_->enum_type(3);
  SatParameters_BinaryMinizationAlgorithm_descriptor_ = SatParameters_descriptor_->enum_type(4);
  SatParameters_ClauseProtection_descriptor_ = SatParameters_descriptor_->enum_type(5);
  SatParameters_ClauseOrdering_descriptor_ = SatParameters_descriptor_->enum_type(6);
  SatParameters_RestartAlgorithm_descriptor_ = SatParameters_descriptor_->enum_type(7);
  SatParameters_MaxSatAssumptionOrder_descriptor_ = SatParameters_descriptor_->enum_type(8);
  SatParameters_MaxSatStratificationAlgorithm_descriptor_ = SatParameters_descriptor_->enum_type(9);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sat_5fparameters_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SatParameters_descriptor_, &SatParameters::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sat_5fparameters_2eproto() {
  delete SatParameters::default_instance_;
  delete SatParameters_reflection_;
  delete SatParameters::_default_default_restart_algorithms_;
}

void protobuf_AddDesc_sat_5fparameters_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024sat_parameters.proto\022\027operations_resea"
    "rch.sat\"\234\037\n\rSatParameters\022`\n\030preferred_v"
    "ariable_order\030\001 \001(\01624.operations_researc"
    "h.sat.SatParameters.VariableOrder:\010IN_OR"
    "DER\022Y\n\020initial_polarity\030\002 \001(\0162/.operatio"
    "ns_research.sat.SatParameters.Polarity:\016"
    "POLARITY_FALSE\022\036\n\020use_phase_saving\030, \001(\010"
    ":\004true\022 \n\025random_polarity_ratio\030- \001(\001:\0010"
    "\022 \n\025random_branches_ratio\030  \001(\001:\0010\022b\n\020li"
    "teral_ordering\030\003 \001(\01626.operations_resear"
    "ch.sat.SatParameters.LiteralOrdering:\020LI"
    "TERAL_IN_ORDER\022o\n\026minimization_algorithm"
    "\030\004 \001(\0162D.operations_research.sat.SatPara"
    "meters.ConflictMinimizationAlgorithm:\tRE"
    "CURSIVE\022\202\001\n\035binary_minimization_algorith"
    "m\030\" \001(\0162@.operations_research.sat.SatPar"
    "ameters.BinaryMinizationAlgorithm:\031BINAR"
    "Y_MINIMIZATION_FIRST\0222\n$subsumption_duri"
    "ng_conflict_analysis\0308 \001(\010:\004true\022$\n\025clau"
    "se_cleanup_period\030\013 \001(\005:\00510000\022$\n\025clause"
    "_cleanup_target\030\r \001(\005:\00510000\022k\n\031clause_c"
    "leanup_protection\030: \001(\01627.operations_res"
    "earch.sat.SatParameters.ClauseProtection"
    ":\017PROTECTION_NONE\022#\n\030clause_cleanup_lbd_"
    "bound\030; \001(\005:\0015\022g\n\027clause_cleanup_orderin"
    "g\030< \001(\01625.operations_research.sat.SatPar"
    "ameters.ClauseOrdering:\017CLAUSE_ACTIVITY\022"
    "!\n\024pb_cleanup_increment\030. \001(\005:\003200\022\035\n\020pb"
    "_cleanup_ratio\030/ \001(\001:\0030.5\022$\n\027variable_ac"
    "tivity_decay\030\017 \001(\001:\0030.8\022+\n\033max_variable_"
    "activity_value\030\020 \001(\001:\0061e+100\022\037\n\021glucose_"
    "max_decay\030\026 \001(\001:\0040.95\022%\n\027glucose_decay_i"
    "ncrement\030\027 \001(\001:\0040.01\022,\n\036glucose_decay_in"
    "crement_period\030\030 \001(\005:\0045000\022$\n\025clause_act"
    "ivity_decay\030\021 \001(\001:\0050.999\022)\n\031max_clause_a"
    "ctivity_value\030\022 \001(\001:\0061e+020\022.\n\037use_gluco"
    "se_bump_again_strategy\030\025 \001(\010:\005false\022S\n\022r"
    "estart_algorithms\030= \003(\01627.operations_res"
    "earch.sat.SatParameters.RestartAlgorithm"
    "\022e\n\032default_restart_algorithms\030F \001(\t:ALU"
    "BY_RESTART,LBD_MOVING_AVERAGE_RESTART,DL"
    "_MOVING_AVERAGE_RESTART\022\037\n\023luby_restart_"
    "period\030\036 \001(\005:\00250\022\'\n\033restart_running_wind"
    "ow_size\030> \001(\005:\00250\022#\n\030restart_dl_average_"
    "ratio\030\? \001(\001:\0011\022&\n\031restart_lbd_average_ra"
    "tio\030G \001(\001:\0030.8\022#\n\024use_blocking_restart\030@"
    " \001(\010:\005false\022*\n\034blocking_restart_window_s"
    "ize\030A \001(\005:\0045000\022(\n\033blocking_restart_mult"
    "iplier\030B \001(\001:\0031.4\0220\n%num_conflicts_befor"
    "e_strategy_changes\030D \001(\005:\0010\022)\n\036strategy_"
    "change_increase_ratio\030E \001(\001:\0010\022 \n\023max_ti"
    "me_in_seconds\030$ \001(\001:\003inf\022#\n\026max_determin"
    "istic_time\030C \001(\001:\003inf\0224\n\027max_number_of_c"
    "onflicts\030% \001(\003:\0239223372036854775807\022\037\n\020m"
    "ax_memory_in_mb\030( \001(\003:\00510000\022-\n\037treat_bi"
    "nary_clauses_separately\030! \001(\010:\004true\022\026\n\013r"
    "andom_seed\030\037 \001(\005:\0011\022\"\n\023log_search_progre"
    "ss\030) \001(\010:\005false\022\032\n\013unsat_proof\030* \001(\010:\005fa"
    "lse\022 \n\021use_pb_resolution\030+ \001(\010:\005false\0226\n"
    "\'minimize_reduction_during_pb_resolution"
    "\0300 \001(\010:\005false\022,\n\036count_assumption_levels"
    "_in_lbd\0301 \001(\010:\004true\022#\n\026presolve_bve_thre"
    "shold\0306 \001(\005:\003500\022%\n\032presolve_bve_clause_"
    "weight\0307 \001(\005:\0013\0225\n)presolve_probing_dete"
    "rministic_time_limit\0309 \001(\001:\00230\022$\n\026use_op"
    "timization_hints\030# \001(\010:\004true\022\033\n\rminimize"
    "_core\0302 \001(\010:\004true\022x\n\030max_sat_assumption_"
    "order\0303 \001(\0162<.operations_research.sat.Sa"
    "tParameters.MaxSatAssumptionOrder:\030DEFAU"
    "LT_ASSUMPTION_ORDER\022/\n max_sat_reverse_a"
    "ssumption_order\0304 \001(\010:\005false\022|\n\026max_sat_"
    "stratification\0305 \001(\0162D.operations_resear"
    "ch.sat.SatParameters.MaxSatStratificatio"
    "nAlgorithm:\026STRATIFICATION_DESCENT\"H\n\rVa"
    "riableOrder\022\014\n\010IN_ORDER\020\000\022\024\n\020IN_REVERSE_"
    "ORDER\020\001\022\023\n\017IN_RANDOM_ORDER\020\002\"\206\001\n\010Polarit"
    "y\022\021\n\rPOLARITY_TRUE\020\000\022\022\n\016POLARITY_FALSE\020\001"
    "\022\023\n\017POLARITY_RANDOM\020\002\022\032\n\026POLARITY_WEIGHT"
    "ED_SIGN\020\003\022\"\n\036POLARITY_REVERSE_WEIGHTED_S"
    "IGN\020\004\"M\n\017LiteralOrdering\022\024\n\020LITERAL_IN_O"
    "RDER\020\000\022\021\n\rVAR_MIN_USAGE\020\001\022\021\n\rVAR_MAX_USA"
    "GE\020\002\"V\n\035ConflictMinimizationAlgorithm\022\010\n"
    "\004NONE\020\000\022\n\n\006SIMPLE\020\001\022\r\n\tRECURSIVE\020\002\022\020\n\014EX"
    "PERIMENTAL\020\003\"\340\001\n\031BinaryMinizationAlgorit"
    "hm\022\032\n\026NO_BINARY_MINIMIZATION\020\000\022\035\n\031BINARY"
    "_MINIMIZATION_FIRST\020\001\0227\n3BINARY_MINIMIZA"
    "TION_FIRST_WITH_TRANSITIVE_REDUCTION\020\004\022)"
    "\n%BINARY_MINIMIZATION_WITH_REACHABILITY\020"
    "\002\022$\n EXPERIMENTAL_BINARY_MINIMIZATION\020\003\""
    "R\n\020ClauseProtection\022\023\n\017PROTECTION_NONE\020\000"
    "\022\025\n\021PROTECTION_ALWAYS\020\001\022\022\n\016PROTECTION_LB"
    "D\020\002\"5\n\016ClauseOrdering\022\023\n\017CLAUSE_ACTIVITY"
    "\020\000\022\016\n\nCLAUSE_LBD\020\001\"s\n\020RestartAlgorithm\022\016"
    "\n\nNO_RESTART\020\000\022\020\n\014LUBY_RESTART\020\001\022\035\n\031DL_M"
    "OVING_AVERAGE_RESTART\020\002\022\036\n\032LBD_MOVING_AV"
    "ERAGE_RESTART\020\003\"t\n\025MaxSatAssumptionOrder"
    "\022\034\n\030DEFAULT_ASSUMPTION_ORDER\020\000\022\035\n\031ORDER_"
    "ASSUMPTION_BY_DEPTH\020\001\022\036\n\032ORDER_ASSUMPTIO"
    "N_BY_WEIGHT\020\002\"o\n\035MaxSatStratificationAlg"
    "orithm\022\027\n\023STRATIFICATION_NONE\020\000\022\032\n\026STRAT"
    "IFICATION_DESCENT\020\001\022\031\n\025STRATIFICATION_AS"
    "CENT\020\002", 4046);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sat_parameters.proto", &protobuf_RegisterTypes);
  SatParameters::_default_default_restart_algorithms_ =
      new ::std::string("LUBY_RESTART,LBD_MOVING_AVERAGE_RESTART,DL_MOVING_AVERAGE_RESTART", 65);
  SatParameters::default_instance_ = new SatParameters();
  SatParameters::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sat_5fparameters_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sat_5fparameters_2eproto {
  StaticDescriptorInitializer_sat_5fparameters_2eproto() {
    protobuf_AddDesc_sat_5fparameters_2eproto();
  }
} static_descriptor_initializer_sat_5fparameters_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* SatParameters_VariableOrder_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SatParameters_VariableOrder_descriptor_;
}
bool SatParameters_VariableOrder_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SatParameters_VariableOrder SatParameters::IN_ORDER;
const SatParameters_VariableOrder SatParameters::IN_REVERSE_ORDER;
const SatParameters_VariableOrder SatParameters::IN_RANDOM_ORDER;
const SatParameters_VariableOrder SatParameters::VariableOrder_MIN;
const SatParameters_VariableOrder SatParameters::VariableOrder_MAX;
const int SatParameters::VariableOrder_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SatParameters_Polarity_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SatParameters_Polarity_descriptor_;
}
bool SatParameters_Polarity_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SatParameters_Polarity SatParameters::POLARITY_TRUE;
const SatParameters_Polarity SatParameters::POLARITY_FALSE;
const SatParameters_Polarity SatParameters::POLARITY_RANDOM;
const SatParameters_Polarity SatParameters::POLARITY_WEIGHTED_SIGN;
const SatParameters_Polarity SatParameters::POLARITY_REVERSE_WEIGHTED_SIGN;
const SatParameters_Polarity SatParameters::Polarity_MIN;
const SatParameters_Polarity SatParameters::Polarity_MAX;
const int SatParameters::Polarity_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SatParameters_LiteralOrdering_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SatParameters_LiteralOrdering_descriptor_;
}
bool SatParameters_LiteralOrdering_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SatParameters_LiteralOrdering SatParameters::LITERAL_IN_ORDER;
const SatParameters_LiteralOrdering SatParameters::VAR_MIN_USAGE;
const SatParameters_LiteralOrdering SatParameters::VAR_MAX_USAGE;
const SatParameters_LiteralOrdering SatParameters::LiteralOrdering_MIN;
const SatParameters_LiteralOrdering SatParameters::LiteralOrdering_MAX;
const int SatParameters::LiteralOrdering_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SatParameters_ConflictMinimizationAlgorithm_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SatParameters_ConflictMinimizationAlgorithm_descriptor_;
}
bool SatParameters_ConflictMinimizationAlgorithm_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SatParameters_ConflictMinimizationAlgorithm SatParameters::NONE;
const SatParameters_ConflictMinimizationAlgorithm SatParameters::SIMPLE;
const SatParameters_ConflictMinimizationAlgorithm SatParameters::RECURSIVE;
const SatParameters_ConflictMinimizationAlgorithm SatParameters::EXPERIMENTAL;
const SatParameters_ConflictMinimizationAlgorithm SatParameters::ConflictMinimizationAlgorithm_MIN;
const SatParameters_ConflictMinimizationAlgorithm SatParameters::ConflictMinimizationAlgorithm_MAX;
const int SatParameters::ConflictMinimizationAlgorithm_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SatParameters_BinaryMinizationAlgorithm_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SatParameters_BinaryMinizationAlgorithm_descriptor_;
}
bool SatParameters_BinaryMinizationAlgorithm_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SatParameters_BinaryMinizationAlgorithm SatParameters::NO_BINARY_MINIMIZATION;
const SatParameters_BinaryMinizationAlgorithm SatParameters::BINARY_MINIMIZATION_FIRST;
const SatParameters_BinaryMinizationAlgorithm SatParameters::BINARY_MINIMIZATION_FIRST_WITH_TRANSITIVE_REDUCTION;
const SatParameters_BinaryMinizationAlgorithm SatParameters::BINARY_MINIMIZATION_WITH_REACHABILITY;
const SatParameters_BinaryMinizationAlgorithm SatParameters::EXPERIMENTAL_BINARY_MINIMIZATION;
const SatParameters_BinaryMinizationAlgorithm SatParameters::BinaryMinizationAlgorithm_MIN;
const SatParameters_BinaryMinizationAlgorithm SatParameters::BinaryMinizationAlgorithm_MAX;
const int SatParameters::BinaryMinizationAlgorithm_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SatParameters_ClauseProtection_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SatParameters_ClauseProtection_descriptor_;
}
bool SatParameters_ClauseProtection_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SatParameters_ClauseProtection SatParameters::PROTECTION_NONE;
const SatParameters_ClauseProtection SatParameters::PROTECTION_ALWAYS;
const SatParameters_ClauseProtection SatParameters::PROTECTION_LBD;
const SatParameters_ClauseProtection SatParameters::ClauseProtection_MIN;
const SatParameters_ClauseProtection SatParameters::ClauseProtection_MAX;
const int SatParameters::ClauseProtection_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SatParameters_ClauseOrdering_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SatParameters_ClauseOrdering_descriptor_;
}
bool SatParameters_ClauseOrdering_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SatParameters_ClauseOrdering SatParameters::CLAUSE_ACTIVITY;
const SatParameters_ClauseOrdering SatParameters::CLAUSE_LBD;
const SatParameters_ClauseOrdering SatParameters::ClauseOrdering_MIN;
const SatParameters_ClauseOrdering SatParameters::ClauseOrdering_MAX;
const int SatParameters::ClauseOrdering_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SatParameters_RestartAlgorithm_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SatParameters_RestartAlgorithm_descriptor_;
}
bool SatParameters_RestartAlgorithm_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SatParameters_RestartAlgorithm SatParameters::NO_RESTART;
const SatParameters_RestartAlgorithm SatParameters::LUBY_RESTART;
const SatParameters_RestartAlgorithm SatParameters::DL_MOVING_AVERAGE_RESTART;
const SatParameters_RestartAlgorithm SatParameters::LBD_MOVING_AVERAGE_RESTART;
const SatParameters_RestartAlgorithm SatParameters::RestartAlgorithm_MIN;
const SatParameters_RestartAlgorithm SatParameters::RestartAlgorithm_MAX;
const int SatParameters::RestartAlgorithm_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SatParameters_MaxSatAssumptionOrder_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SatParameters_MaxSatAssumptionOrder_descriptor_;
}
bool SatParameters_MaxSatAssumptionOrder_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SatParameters_MaxSatAssumptionOrder SatParameters::DEFAULT_ASSUMPTION_ORDER;
const SatParameters_MaxSatAssumptionOrder SatParameters::ORDER_ASSUMPTION_BY_DEPTH;
const SatParameters_MaxSatAssumptionOrder SatParameters::ORDER_ASSUMPTION_BY_WEIGHT;
const SatParameters_MaxSatAssumptionOrder SatParameters::MaxSatAssumptionOrder_MIN;
const SatParameters_MaxSatAssumptionOrder SatParameters::MaxSatAssumptionOrder_MAX;
const int SatParameters::MaxSatAssumptionOrder_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SatParameters_MaxSatStratificationAlgorithm_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SatParameters_MaxSatStratificationAlgorithm_descriptor_;
}
bool SatParameters_MaxSatStratificationAlgorithm_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SatParameters_MaxSatStratificationAlgorithm SatParameters::STRATIFICATION_NONE;
const SatParameters_MaxSatStratificationAlgorithm SatParameters::STRATIFICATION_DESCENT;
const SatParameters_MaxSatStratificationAlgorithm SatParameters::STRATIFICATION_ASCENT;
const SatParameters_MaxSatStratificationAlgorithm SatParameters::MaxSatStratificationAlgorithm_MIN;
const SatParameters_MaxSatStratificationAlgorithm SatParameters::MaxSatStratificationAlgorithm_MAX;
const int SatParameters::MaxSatStratificationAlgorithm_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* SatParameters::_default_default_restart_algorithms_ = NULL;
#ifndef _MSC_VER
const int SatParameters::kPreferredVariableOrderFieldNumber;
const int SatParameters::kInitialPolarityFieldNumber;
const int SatParameters::kUsePhaseSavingFieldNumber;
const int SatParameters::kRandomPolarityRatioFieldNumber;
const int SatParameters::kRandomBranchesRatioFieldNumber;
const int SatParameters::kLiteralOrderingFieldNumber;
const int SatParameters::kMinimizationAlgorithmFieldNumber;
const int SatParameters::kBinaryMinimizationAlgorithmFieldNumber;
const int SatParameters::kSubsumptionDuringConflictAnalysisFieldNumber;
const int SatParameters::kClauseCleanupPeriodFieldNumber;
const int SatParameters::kClauseCleanupTargetFieldNumber;
const int SatParameters::kClauseCleanupProtectionFieldNumber;
const int SatParameters::kClauseCleanupLbdBoundFieldNumber;
const int SatParameters::kClauseCleanupOrderingFieldNumber;
const int SatParameters::kPbCleanupIncrementFieldNumber;
const int SatParameters::kPbCleanupRatioFieldNumber;
const int SatParameters::kVariableActivityDecayFieldNumber;
const int SatParameters::kMaxVariableActivityValueFieldNumber;
const int SatParameters::kGlucoseMaxDecayFieldNumber;
const int SatParameters::kGlucoseDecayIncrementFieldNumber;
const int SatParameters::kGlucoseDecayIncrementPeriodFieldNumber;
const int SatParameters::kClauseActivityDecayFieldNumber;
const int SatParameters::kMaxClauseActivityValueFieldNumber;
const int SatParameters::kUseGlucoseBumpAgainStrategyFieldNumber;
const int SatParameters::kRestartAlgorithmsFieldNumber;
const int SatParameters::kDefaultRestartAlgorithmsFieldNumber;
const int SatParameters::kLubyRestartPeriodFieldNumber;
const int SatParameters::kRestartRunningWindowSizeFieldNumber;
const int SatParameters::kRestartDlAverageRatioFieldNumber;
const int SatParameters::kRestartLbdAverageRatioFieldNumber;
const int SatParameters::kUseBlockingRestartFieldNumber;
const int SatParameters::kBlockingRestartWindowSizeFieldNumber;
const int SatParameters::kBlockingRestartMultiplierFieldNumber;
const int SatParameters::kNumConflictsBeforeStrategyChangesFieldNumber;
const int SatParameters::kStrategyChangeIncreaseRatioFieldNumber;
const int SatParameters::kMaxTimeInSecondsFieldNumber;
const int SatParameters::kMaxDeterministicTimeFieldNumber;
const int SatParameters::kMaxNumberOfConflictsFieldNumber;
const int SatParameters::kMaxMemoryInMbFieldNumber;
const int SatParameters::kTreatBinaryClausesSeparatelyFieldNumber;
const int SatParameters::kRandomSeedFieldNumber;
const int SatParameters::kLogSearchProgressFieldNumber;
const int SatParameters::kUnsatProofFieldNumber;
const int SatParameters::kUsePbResolutionFieldNumber;
const int SatParameters::kMinimizeReductionDuringPbResolutionFieldNumber;
const int SatParameters::kCountAssumptionLevelsInLbdFieldNumber;
const int SatParameters::kPresolveBveThresholdFieldNumber;
const int SatParameters::kPresolveBveClauseWeightFieldNumber;
const int SatParameters::kPresolveProbingDeterministicTimeLimitFieldNumber;
const int SatParameters::kUseOptimizationHintsFieldNumber;
const int SatParameters::kMinimizeCoreFieldNumber;
const int SatParameters::kMaxSatAssumptionOrderFieldNumber;
const int SatParameters::kMaxSatReverseAssumptionOrderFieldNumber;
const int SatParameters::kMaxSatStratificationFieldNumber;
#endif  // !_MSC_VER

SatParameters::SatParameters()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.sat.SatParameters)
}

void SatParameters::InitAsDefaultInstance() {
}

SatParameters::SatParameters(const SatParameters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.SatParameters)
}

void SatParameters::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  preferred_variable_order_ = 0;
  initial_polarity_ = 1;
  use_phase_saving_ = true;
  random_polarity_ratio_ = 0;
  random_branches_ratio_ = 0;
  literal_ordering_ = 0;
  minimization_algorithm_ = 2;
  binary_minimization_algorithm_ = 1;
  subsumption_during_conflict_analysis_ = true;
  clause_cleanup_period_ = 10000;
  clause_cleanup_target_ = 10000;
  clause_cleanup_protection_ = 0;
  clause_cleanup_lbd_bound_ = 5;
  clause_cleanup_ordering_ = 0;
  pb_cleanup_increment_ = 200;
  pb_cleanup_ratio_ = 0.5;
  variable_activity_decay_ = 0.8;
  max_variable_activity_value_ = 1e+100;
  glucose_max_decay_ = 0.95;
  glucose_decay_increment_ = 0.01;
  glucose_decay_increment_period_ = 5000;
  clause_activity_decay_ = 0.999;
  max_clause_activity_value_ = 1e+020;
  use_glucose_bump_again_strategy_ = false;
  default_restart_algorithms_ = const_cast< ::std::string*>(_default_default_restart_algorithms_);
  luby_restart_period_ = 50;
  restart_running_window_size_ = 50;
  restart_dl_average_ratio_ = 1;
  restart_lbd_average_ratio_ = 0.8;
  use_blocking_restart_ = false;
  blocking_restart_window_size_ = 5000;
  blocking_restart_multiplier_ = 1.4;
  num_conflicts_before_strategy_changes_ = 0;
  strategy_change_increase_ratio_ = 0;
  max_time_in_seconds_ = ::google::protobuf::internal::Infinity();
  max_deterministic_time_ = ::google::protobuf::internal::Infinity();
  max_number_of_conflicts_ = GOOGLE_LONGLONG(9223372036854775807);
  max_memory_in_mb_ = GOOGLE_LONGLONG(10000);
  treat_binary_clauses_separately_ = true;
  random_seed_ = 1;
  log_search_progress_ = false;
  unsat_proof_ = false;
  use_pb_resolution_ = false;
  minimize_reduction_during_pb_resolution_ = false;
  count_assumption_levels_in_lbd_ = true;
  presolve_bve_threshold_ = 500;
  presolve_bve_clause_weight_ = 3;
  presolve_probing_deterministic_time_limit_ = 30;
  use_optimization_hints_ = true;
  minimize_core_ = true;
  max_sat_assumption_order_ = 0;
  max_sat_reverse_assumption_order_ = false;
  max_sat_stratification_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SatParameters::~SatParameters() {
  // @@protoc_insertion_point(destructor:operations_research.sat.SatParameters)
  SharedDtor();
}

void SatParameters::SharedDtor() {
  if (default_restart_algorithms_ != _default_default_restart_algorithms_) {
    delete default_restart_algorithms_;
  }
  if (this != default_instance_) {
  }
}

void SatParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SatParameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SatParameters_descriptor_;
}

const SatParameters& SatParameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sat_5fparameters_2eproto();
  return *default_instance_;
}

SatParameters* SatParameters::default_instance_ = NULL;

SatParameters* SatParameters::New() const {
  return new SatParameters;
}

void SatParameters::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SatParameters*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(random_polarity_ratio_, literal_ordering_);
    preferred_variable_order_ = 0;
    initial_polarity_ = 1;
    use_phase_saving_ = true;
    minimization_algorithm_ = 2;
    binary_minimization_algorithm_ = 1;
  }
  if (_has_bits_[8 / 32] & 65280) {
    subsumption_during_conflict_analysis_ = true;
    clause_cleanup_period_ = 10000;
    clause_cleanup_target_ = 10000;
    clause_cleanup_protection_ = 0;
    clause_cleanup_lbd_bound_ = 5;
    clause_cleanup_ordering_ = 0;
    pb_cleanup_increment_ = 200;
    pb_cleanup_ratio_ = 0.5;
  }
  if (_has_bits_[16 / 32] & 16711680) {
    variable_activity_decay_ = 0.8;
    max_variable_activity_value_ = 1e+100;
    glucose_max_decay_ = 0.95;
    glucose_decay_increment_ = 0.01;
    glucose_decay_increment_period_ = 5000;
    clause_activity_decay_ = 0.999;
    max_clause_activity_value_ = 1e+020;
    use_glucose_bump_again_strategy_ = false;
  }
  if (_has_bits_[24 / 32] & 4261412864) {
    if (has_default_restart_algorithms()) {
      if (default_restart_algorithms_ != _default_default_restart_algorithms_) {
        default_restart_algorithms_->assign(*_default_default_restart_algorithms_);
      }
    }
    luby_restart_period_ = 50;
    restart_running_window_size_ = 50;
    restart_dl_average_ratio_ = 1;
    restart_lbd_average_ratio_ = 0.8;
    use_blocking_restart_ = false;
    blocking_restart_window_size_ = 5000;
  }
  if (_has_bits_[32 / 32] & 255) {
    blocking_restart_multiplier_ = 1.4;
    num_conflicts_before_strategy_changes_ = 0;
    strategy_change_increase_ratio_ = 0;
    max_time_in_seconds_ = ::google::protobuf::internal::Infinity();
    max_deterministic_time_ = ::google::protobuf::internal::Infinity();
    max_number_of_conflicts_ = GOOGLE_LONGLONG(9223372036854775807);
    max_memory_in_mb_ = GOOGLE_LONGLONG(10000);
    treat_binary_clauses_separately_ = true;
  }
  if (_has_bits_[40 / 32] & 65280) {
    ZR_(log_search_progress_, use_pb_resolution_);
    random_seed_ = 1;
    minimize_reduction_during_pb_resolution_ = false;
    count_assumption_levels_in_lbd_ = true;
    presolve_bve_threshold_ = 500;
    presolve_bve_clause_weight_ = 3;
  }
  if (_has_bits_[48 / 32] & 4128768) {
    ZR_(max_sat_assumption_order_, max_sat_reverse_assumption_order_);
    presolve_probing_deterministic_time_limit_ = 30;
    use_optimization_hints_ = true;
    minimize_core_ = true;
    max_sat_stratification_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  restart_algorithms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SatParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.sat.SatParameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .operations_research.sat.SatParameters.VariableOrder preferred_variable_order = 1 [default = IN_ORDER];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::operations_research::sat::SatParameters_VariableOrder_IsValid(value)) {
            set_preferred_variable_order(static_cast< ::operations_research::sat::SatParameters_VariableOrder >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_initial_polarity;
        break;
      }

      // optional .operations_research.sat.SatParameters.Polarity initial_polarity = 2 [default = POLARITY_FALSE];
      case 2: {
        if (tag == 16) {
         parse_initial_polarity:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::operations_research::sat::SatParameters_Polarity_IsValid(value)) {
            set_initial_polarity(static_cast< ::operations_research::sat::SatParameters_Polarity >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_literal_ordering;
        break;
      }

      // optional .operations_research.sat.SatParameters.LiteralOrdering literal_ordering = 3 [default = LITERAL_IN_ORDER];
      case 3: {
        if (tag == 24) {
         parse_literal_ordering:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::operations_research::sat::SatParameters_LiteralOrdering_IsValid(value)) {
            set_literal_ordering(static_cast< ::operations_research::sat::SatParameters_LiteralOrdering >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_minimization_algorithm;
        break;
      }

      // optional .operations_research.sat.SatParameters.ConflictMinimizationAlgorithm minimization_algorithm = 4 [default = RECURSIVE];
      case 4: {
        if (tag == 32) {
         parse_minimization_algorithm:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::operations_research::sat::SatParameters_ConflictMinimizationAlgorithm_IsValid(value)) {
            set_minimization_algorithm(static_cast< ::operations_research::sat::SatParameters_ConflictMinimizationAlgorithm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_clause_cleanup_period;
        break;
      }

      // optional int32 clause_cleanup_period = 11 [default = 10000];
      case 11: {
        if (tag == 88) {
         parse_clause_cleanup_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clause_cleanup_period_)));
          set_has_clause_cleanup_period();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_clause_cleanup_target;
        break;
      }

      // optional int32 clause_cleanup_target = 13 [default = 10000];
      case 13: {
        if (tag == 104) {
         parse_clause_cleanup_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clause_cleanup_target_)));
          set_has_clause_cleanup_target();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_variable_activity_decay;
        break;
      }

      // optional double variable_activity_decay = 15 [default = 0.8];
      case 15: {
        if (tag == 121) {
         parse_variable_activity_decay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &variable_activity_decay_)));
          set_has_variable_activity_decay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_max_variable_activity_value;
        break;
      }

      // optional double max_variable_activity_value = 16 [default = 1e+100];
      case 16: {
        if (tag == 129) {
         parse_max_variable_activity_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_variable_activity_value_)));
          set_has_max_variable_activity_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_clause_activity_decay;
        break;
      }

      // optional double clause_activity_decay = 17 [default = 0.999];
      case 17: {
        if (tag == 137) {
         parse_clause_activity_decay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &clause_activity_decay_)));
          set_has_clause_activity_decay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_max_clause_activity_value;
        break;
      }

      // optional double max_clause_activity_value = 18 [default = 1e+020];
      case 18: {
        if (tag == 145) {
         parse_max_clause_activity_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_clause_activity_value_)));
          set_has_max_clause_activity_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_use_glucose_bump_again_strategy;
        break;
      }

      // optional bool use_glucose_bump_again_strategy = 21 [default = false];
      case 21: {
        if (tag == 168) {
         parse_use_glucose_bump_again_strategy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_glucose_bump_again_strategy_)));
          set_has_use_glucose_bump_again_strategy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_glucose_max_decay;
        break;
      }

      // optional double glucose_max_decay = 22 [default = 0.95];
      case 22: {
        if (tag == 177) {
         parse_glucose_max_decay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &glucose_max_decay_)));
          set_has_glucose_max_decay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_glucose_decay_increment;
        break;
      }

      // optional double glucose_decay_increment = 23 [default = 0.01];
      case 23: {
        if (tag == 185) {
         parse_glucose_decay_increment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &glucose_decay_increment_)));
          set_has_glucose_decay_increment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_glucose_decay_increment_period;
        break;
      }

      // optional int32 glucose_decay_increment_period = 24 [default = 5000];
      case 24: {
        if (tag == 192) {
         parse_glucose_decay_increment_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &glucose_decay_increment_period_)));
          set_has_glucose_decay_increment_period();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_luby_restart_period;
        break;
      }

      // optional int32 luby_restart_period = 30 [default = 50];
      case 30: {
        if (tag == 240) {
         parse_luby_restart_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &luby_restart_period_)));
          set_has_luby_restart_period();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_random_seed;
        break;
      }

      // optional int32 random_seed = 31 [default = 1];
      case 31: {
        if (tag == 248) {
         parse_random_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &random_seed_)));
          set_has_random_seed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(257)) goto parse_random_branches_ratio;
        break;
      }

      // optional double random_branches_ratio = 32 [default = 0];
      case 32: {
        if (tag == 257) {
         parse_random_branches_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &random_branches_ratio_)));
          set_has_random_branches_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_treat_binary_clauses_separately;
        break;
      }

      // optional bool treat_binary_clauses_separately = 33 [default = true];
      case 33: {
        if (tag == 264) {
         parse_treat_binary_clauses_separately:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &treat_binary_clauses_separately_)));
          set_has_treat_binary_clauses_separately();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_binary_minimization_algorithm;
        break;
      }

      // optional .operations_research.sat.SatParameters.BinaryMinizationAlgorithm binary_minimization_algorithm = 34 [default = BINARY_MINIMIZATION_FIRST];
      case 34: {
        if (tag == 272) {
         parse_binary_minimization_algorithm:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::operations_research::sat::SatParameters_BinaryMinizationAlgorithm_IsValid(value)) {
            set_binary_minimization_algorithm(static_cast< ::operations_research::sat::SatParameters_BinaryMinizationAlgorithm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(34, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_use_optimization_hints;
        break;
      }

      // optional bool use_optimization_hints = 35 [default = true];
      case 35: {
        if (tag == 280) {
         parse_use_optimization_hints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_optimization_hints_)));
          set_has_use_optimization_hints();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(289)) goto parse_max_time_in_seconds;
        break;
      }

      // optional double max_time_in_seconds = 36 [default = inf];
      case 36: {
        if (tag == 289) {
         parse_max_time_in_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_time_in_seconds_)));
          set_has_max_time_in_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_max_number_of_conflicts;
        break;
      }

      // optional int64 max_number_of_conflicts = 37 [default = 9223372036854775807];
      case 37: {
        if (tag == 296) {
         parse_max_number_of_conflicts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_number_of_conflicts_)));
          set_has_max_number_of_conflicts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_max_memory_in_mb;
        break;
      }

      // optional int64 max_memory_in_mb = 40 [default = 10000];
      case 40: {
        if (tag == 320) {
         parse_max_memory_in_mb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_memory_in_mb_)));
          set_has_max_memory_in_mb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_log_search_progress;
        break;
      }

      // optional bool log_search_progress = 41 [default = false];
      case 41: {
        if (tag == 328) {
         parse_log_search_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &log_search_progress_)));
          set_has_log_search_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_unsat_proof;
        break;
      }

      // optional bool unsat_proof = 42 [default = false];
      case 42: {
        if (tag == 336) {
         parse_unsat_proof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unsat_proof_)));
          set_has_unsat_proof();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_use_pb_resolution;
        break;
      }

      // optional bool use_pb_resolution = 43 [default = false];
      case 43: {
        if (tag == 344) {
         parse_use_pb_resolution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_pb_resolution_)));
          set_has_use_pb_resolution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_use_phase_saving;
        break;
      }

      // optional bool use_phase_saving = 44 [default = true];
      case 44: {
        if (tag == 352) {
         parse_use_phase_saving:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_phase_saving_)));
          set_has_use_phase_saving();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(361)) goto parse_random_polarity_ratio;
        break;
      }

      // optional double random_polarity_ratio = 45 [default = 0];
      case 45: {
        if (tag == 361) {
         parse_random_polarity_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &random_polarity_ratio_)));
          set_has_random_polarity_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_pb_cleanup_increment;
        break;
      }

      // optional int32 pb_cleanup_increment = 46 [default = 200];
      case 46: {
        if (tag == 368) {
         parse_pb_cleanup_increment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pb_cleanup_increment_)));
          set_has_pb_cleanup_increment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(377)) goto parse_pb_cleanup_ratio;
        break;
      }

      // optional double pb_cleanup_ratio = 47 [default = 0.5];
      case 47: {
        if (tag == 377) {
         parse_pb_cleanup_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pb_cleanup_ratio_)));
          set_has_pb_cleanup_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_minimize_reduction_during_pb_resolution;
        break;
      }

      // optional bool minimize_reduction_during_pb_resolution = 48 [default = false];
      case 48: {
        if (tag == 384) {
         parse_minimize_reduction_during_pb_resolution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &minimize_reduction_during_pb_resolution_)));
          set_has_minimize_reduction_during_pb_resolution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_count_assumption_levels_in_lbd;
        break;
      }

      // optional bool count_assumption_levels_in_lbd = 49 [default = true];
      case 49: {
        if (tag == 392) {
         parse_count_assumption_levels_in_lbd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &count_assumption_levels_in_lbd_)));
          set_has_count_assumption_levels_in_lbd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_minimize_core;
        break;
      }

      // optional bool minimize_core = 50 [default = true];
      case 50: {
        if (tag == 400) {
         parse_minimize_core:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &minimize_core_)));
          set_has_minimize_core();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_max_sat_assumption_order;
        break;
      }

      // optional .operations_research.sat.SatParameters.MaxSatAssumptionOrder max_sat_assumption_order = 51 [default = DEFAULT_ASSUMPTION_ORDER];
      case 51: {
        if (tag == 408) {
         parse_max_sat_assumption_order:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::operations_research::sat::SatParameters_MaxSatAssumptionOrder_IsValid(value)) {
            set_max_sat_assumption_order(static_cast< ::operations_research::sat::SatParameters_MaxSatAssumptionOrder >(value));
          } else {
            mutable_unknown_fields()->AddVarint(51, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_max_sat_reverse_assumption_order;
        break;
      }

      // optional bool max_sat_reverse_assumption_order = 52 [default = false];
      case 52: {
        if (tag == 416) {
         parse_max_sat_reverse_assumption_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &max_sat_reverse_assumption_order_)));
          set_has_max_sat_reverse_assumption_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_max_sat_stratification;
        break;
      }

      // optional .operations_research.sat.SatParameters.MaxSatStratificationAlgorithm max_sat_stratification = 53 [default = STRATIFICATION_DESCENT];
      case 53: {
        if (tag == 424) {
         parse_max_sat_stratification:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::operations_research::sat::SatParameters_MaxSatStratificationAlgorithm_IsValid(value)) {
            set_max_sat_stratification(static_cast< ::operations_research::sat::SatParameters_MaxSatStratificationAlgorithm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(53, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(432)) goto parse_presolve_bve_threshold;
        break;
      }

      // optional int32 presolve_bve_threshold = 54 [default = 500];
      case 54: {
        if (tag == 432) {
         parse_presolve_bve_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presolve_bve_threshold_)));
          set_has_presolve_bve_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(440)) goto parse_presolve_bve_clause_weight;
        break;
      }

      // optional int32 presolve_bve_clause_weight = 55 [default = 3];
      case 55: {
        if (tag == 440) {
         parse_presolve_bve_clause_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presolve_bve_clause_weight_)));
          set_has_presolve_bve_clause_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_subsumption_during_conflict_analysis;
        break;
      }

      // optional bool subsumption_during_conflict_analysis = 56 [default = true];
      case 56: {
        if (tag == 448) {
         parse_subsumption_during_conflict_analysis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &subsumption_during_conflict_analysis_)));
          set_has_subsumption_during_conflict_analysis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(457)) goto parse_presolve_probing_deterministic_time_limit;
        break;
      }

      // optional double presolve_probing_deterministic_time_limit = 57 [default = 30];
      case 57: {
        if (tag == 457) {
         parse_presolve_probing_deterministic_time_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &presolve_probing_deterministic_time_limit_)));
          set_has_presolve_probing_deterministic_time_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(464)) goto parse_clause_cleanup_protection;
        break;
      }

      // optional .operations_research.sat.SatParameters.ClauseProtection clause_cleanup_protection = 58 [default = PROTECTION_NONE];
      case 58: {
        if (tag == 464) {
         parse_clause_cleanup_protection:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::operations_research::sat::SatParameters_ClauseProtection_IsValid(value)) {
            set_clause_cleanup_protection(static_cast< ::operations_research::sat::SatParameters_ClauseProtection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(58, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(472)) goto parse_clause_cleanup_lbd_bound;
        break;
      }

      // optional int32 clause_cleanup_lbd_bound = 59 [default = 5];
      case 59: {
        if (tag == 472) {
         parse_clause_cleanup_lbd_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clause_cleanup_lbd_bound_)));
          set_has_clause_cleanup_lbd_bound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_clause_cleanup_ordering;
        break;
      }

      // optional .operations_research.sat.SatParameters.ClauseOrdering clause_cleanup_ordering = 60 [default = CLAUSE_ACTIVITY];
      case 60: {
        if (tag == 480) {
         parse_clause_cleanup_ordering:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::operations_research::sat::SatParameters_ClauseOrdering_IsValid(value)) {
            set_clause_cleanup_ordering(static_cast< ::operations_research::sat::SatParameters_ClauseOrdering >(value));
          } else {
            mutable_unknown_fields()->AddVarint(60, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_restart_algorithms;
        break;
      }

      // repeated .operations_research.sat.SatParameters.RestartAlgorithm restart_algorithms = 61;
      case 61: {
        if (tag == 488) {
         parse_restart_algorithms:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::operations_research::sat::SatParameters_RestartAlgorithm_IsValid(value)) {
            add_restart_algorithms(static_cast< ::operations_research::sat::SatParameters_RestartAlgorithm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(61, value);
          }
        } else if (tag == 490) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::operations_research::sat::SatParameters_RestartAlgorithm_IsValid,
                 this->mutable_restart_algorithms())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_restart_algorithms;
        if (input->ExpectTag(496)) goto parse_restart_running_window_size;
        break;
      }

      // optional int32 restart_running_window_size = 62 [default = 50];
      case 62: {
        if (tag == 496) {
         parse_restart_running_window_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &restart_running_window_size_)));
          set_has_restart_running_window_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(505)) goto parse_restart_dl_average_ratio;
        break;
      }

      // optional double restart_dl_average_ratio = 63 [default = 1];
      case 63: {
        if (tag == 505) {
         parse_restart_dl_average_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &restart_dl_average_ratio_)));
          set_has_restart_dl_average_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(512)) goto parse_use_blocking_restart;
        break;
      }

      // optional bool use_blocking_restart = 64 [default = false];
      case 64: {
        if (tag == 512) {
         parse_use_blocking_restart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_blocking_restart_)));
          set_has_use_blocking_restart();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(520)) goto parse_blocking_restart_window_size;
        break;
      }

      // optional int32 blocking_restart_window_size = 65 [default = 5000];
      case 65: {
        if (tag == 520) {
         parse_blocking_restart_window_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blocking_restart_window_size_)));
          set_has_blocking_restart_window_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(529)) goto parse_blocking_restart_multiplier;
        break;
      }

      // optional double blocking_restart_multiplier = 66 [default = 1.4];
      case 66: {
        if (tag == 529) {
         parse_blocking_restart_multiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &blocking_restart_multiplier_)));
          set_has_blocking_restart_multiplier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(537)) goto parse_max_deterministic_time;
        break;
      }

      // optional double max_deterministic_time = 67 [default = inf];
      case 67: {
        if (tag == 537) {
         parse_max_deterministic_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_deterministic_time_)));
          set_has_max_deterministic_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(544)) goto parse_num_conflicts_before_strategy_changes;
        break;
      }

      // optional int32 num_conflicts_before_strategy_changes = 68 [default = 0];
      case 68: {
        if (tag == 544) {
         parse_num_conflicts_before_strategy_changes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_conflicts_before_strategy_changes_)));
          set_has_num_conflicts_before_strategy_changes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(553)) goto parse_strategy_change_increase_ratio;
        break;
      }

      // optional double strategy_change_increase_ratio = 69 [default = 0];
      case 69: {
        if (tag == 553) {
         parse_strategy_change_increase_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &strategy_change_increase_ratio_)));
          set_has_strategy_change_increase_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(562)) goto parse_default_restart_algorithms;
        break;
      }

      // optional string default_restart_algorithms = 70 [default = "LUBY_RESTART,LBD_MOVING_AVERAGE_RESTART,DL_MOVING_AVERAGE_RESTART"];
      case 70: {
        if (tag == 562) {
         parse_default_restart_algorithms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_default_restart_algorithms()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->default_restart_algorithms().data(), this->default_restart_algorithms().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "default_restart_algorithms");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(569)) goto parse_restart_lbd_average_ratio;
        break;
      }

      // optional double restart_lbd_average_ratio = 71 [default = 0.8];
      case 71: {
        if (tag == 569) {
         parse_restart_lbd_average_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &restart_lbd_average_ratio_)));
          set_has_restart_lbd_average_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.sat.SatParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.sat.SatParameters)
  return false;
#undef DO_
}

void SatParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.sat.SatParameters)
  // optional .operations_research.sat.SatParameters.VariableOrder preferred_variable_order = 1 [default = IN_ORDER];
  if (has_preferred_variable_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->preferred_variable_order(), output);
  }

  // optional .operations_research.sat.SatParameters.Polarity initial_polarity = 2 [default = POLARITY_FALSE];
  if (has_initial_polarity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->initial_polarity(), output);
  }

  // optional .operations_research.sat.SatParameters.LiteralOrdering literal_ordering = 3 [default = LITERAL_IN_ORDER];
  if (has_literal_ordering()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->literal_ordering(), output);
  }

  // optional .operations_research.sat.SatParameters.ConflictMinimizationAlgorithm minimization_algorithm = 4 [default = RECURSIVE];
  if (has_minimization_algorithm()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->minimization_algorithm(), output);
  }

  // optional int32 clause_cleanup_period = 11 [default = 10000];
  if (has_clause_cleanup_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->clause_cleanup_period(), output);
  }

  // optional int32 clause_cleanup_target = 13 [default = 10000];
  if (has_clause_cleanup_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->clause_cleanup_target(), output);
  }

  // optional double variable_activity_decay = 15 [default = 0.8];
  if (has_variable_activity_decay()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->variable_activity_decay(), output);
  }

  // optional double max_variable_activity_value = 16 [default = 1e+100];
  if (has_max_variable_activity_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->max_variable_activity_value(), output);
  }

  // optional double clause_activity_decay = 17 [default = 0.999];
  if (has_clause_activity_decay()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->clause_activity_decay(), output);
  }

  // optional double max_clause_activity_value = 18 [default = 1e+020];
  if (has_max_clause_activity_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->max_clause_activity_value(), output);
  }

  // optional bool use_glucose_bump_again_strategy = 21 [default = false];
  if (has_use_glucose_bump_again_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->use_glucose_bump_again_strategy(), output);
  }

  // optional double glucose_max_decay = 22 [default = 0.95];
  if (has_glucose_max_decay()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->glucose_max_decay(), output);
  }

  // optional double glucose_decay_increment = 23 [default = 0.01];
  if (has_glucose_decay_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->glucose_decay_increment(), output);
  }

  // optional int32 glucose_decay_increment_period = 24 [default = 5000];
  if (has_glucose_decay_increment_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->glucose_decay_increment_period(), output);
  }

  // optional int32 luby_restart_period = 30 [default = 50];
  if (has_luby_restart_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->luby_restart_period(), output);
  }

  // optional int32 random_seed = 31 [default = 1];
  if (has_random_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->random_seed(), output);
  }

  // optional double random_branches_ratio = 32 [default = 0];
  if (has_random_branches_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->random_branches_ratio(), output);
  }

  // optional bool treat_binary_clauses_separately = 33 [default = true];
  if (has_treat_binary_clauses_separately()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->treat_binary_clauses_separately(), output);
  }

  // optional .operations_research.sat.SatParameters.BinaryMinizationAlgorithm binary_minimization_algorithm = 34 [default = BINARY_MINIMIZATION_FIRST];
  if (has_binary_minimization_algorithm()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      34, this->binary_minimization_algorithm(), output);
  }

  // optional bool use_optimization_hints = 35 [default = true];
  if (has_use_optimization_hints()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->use_optimization_hints(), output);
  }

  // optional double max_time_in_seconds = 36 [default = inf];
  if (has_max_time_in_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->max_time_in_seconds(), output);
  }

  // optional int64 max_number_of_conflicts = 37 [default = 9223372036854775807];
  if (has_max_number_of_conflicts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(37, this->max_number_of_conflicts(), output);
  }

  // optional int64 max_memory_in_mb = 40 [default = 10000];
  if (has_max_memory_in_mb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(40, this->max_memory_in_mb(), output);
  }

  // optional bool log_search_progress = 41 [default = false];
  if (has_log_search_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->log_search_progress(), output);
  }

  // optional bool unsat_proof = 42 [default = false];
  if (has_unsat_proof()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->unsat_proof(), output);
  }

  // optional bool use_pb_resolution = 43 [default = false];
  if (has_use_pb_resolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->use_pb_resolution(), output);
  }

  // optional bool use_phase_saving = 44 [default = true];
  if (has_use_phase_saving()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(44, this->use_phase_saving(), output);
  }

  // optional double random_polarity_ratio = 45 [default = 0];
  if (has_random_polarity_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(45, this->random_polarity_ratio(), output);
  }

  // optional int32 pb_cleanup_increment = 46 [default = 200];
  if (has_pb_cleanup_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->pb_cleanup_increment(), output);
  }

  // optional double pb_cleanup_ratio = 47 [default = 0.5];
  if (has_pb_cleanup_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(47, this->pb_cleanup_ratio(), output);
  }

  // optional bool minimize_reduction_during_pb_resolution = 48 [default = false];
  if (has_minimize_reduction_during_pb_resolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(48, this->minimize_reduction_during_pb_resolution(), output);
  }

  // optional bool count_assumption_levels_in_lbd = 49 [default = true];
  if (has_count_assumption_levels_in_lbd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(49, this->count_assumption_levels_in_lbd(), output);
  }

  // optional bool minimize_core = 50 [default = true];
  if (has_minimize_core()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(50, this->minimize_core(), output);
  }

  // optional .operations_research.sat.SatParameters.MaxSatAssumptionOrder max_sat_assumption_order = 51 [default = DEFAULT_ASSUMPTION_ORDER];
  if (has_max_sat_assumption_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      51, this->max_sat_assumption_order(), output);
  }

  // optional bool max_sat_reverse_assumption_order = 52 [default = false];
  if (has_max_sat_reverse_assumption_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(52, this->max_sat_reverse_assumption_order(), output);
  }

  // optional .operations_research.sat.SatParameters.MaxSatStratificationAlgorithm max_sat_stratification = 53 [default = STRATIFICATION_DESCENT];
  if (has_max_sat_stratification()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      53, this->max_sat_stratification(), output);
  }

  // optional int32 presolve_bve_threshold = 54 [default = 500];
  if (has_presolve_bve_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->presolve_bve_threshold(), output);
  }

  // optional int32 presolve_bve_clause_weight = 55 [default = 3];
  if (has_presolve_bve_clause_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->presolve_bve_clause_weight(), output);
  }

  // optional bool subsumption_during_conflict_analysis = 56 [default = true];
  if (has_subsumption_during_conflict_analysis()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(56, this->subsumption_during_conflict_analysis(), output);
  }

  // optional double presolve_probing_deterministic_time_limit = 57 [default = 30];
  if (has_presolve_probing_deterministic_time_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(57, this->presolve_probing_deterministic_time_limit(), output);
  }

  // optional .operations_research.sat.SatParameters.ClauseProtection clause_cleanup_protection = 58 [default = PROTECTION_NONE];
  if (has_clause_cleanup_protection()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      58, this->clause_cleanup_protection(), output);
  }

  // optional int32 clause_cleanup_lbd_bound = 59 [default = 5];
  if (has_clause_cleanup_lbd_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(59, this->clause_cleanup_lbd_bound(), output);
  }

  // optional .operations_research.sat.SatParameters.ClauseOrdering clause_cleanup_ordering = 60 [default = CLAUSE_ACTIVITY];
  if (has_clause_cleanup_ordering()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      60, this->clause_cleanup_ordering(), output);
  }

  // repeated .operations_research.sat.SatParameters.RestartAlgorithm restart_algorithms = 61;
  for (int i = 0; i < this->restart_algorithms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      61, this->restart_algorithms(i), output);
  }

  // optional int32 restart_running_window_size = 62 [default = 50];
  if (has_restart_running_window_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->restart_running_window_size(), output);
  }

  // optional double restart_dl_average_ratio = 63 [default = 1];
  if (has_restart_dl_average_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(63, this->restart_dl_average_ratio(), output);
  }

  // optional bool use_blocking_restart = 64 [default = false];
  if (has_use_blocking_restart()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(64, this->use_blocking_restart(), output);
  }

  // optional int32 blocking_restart_window_size = 65 [default = 5000];
  if (has_blocking_restart_window_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(65, this->blocking_restart_window_size(), output);
  }

  // optional double blocking_restart_multiplier = 66 [default = 1.4];
  if (has_blocking_restart_multiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(66, this->blocking_restart_multiplier(), output);
  }

  // optional double max_deterministic_time = 67 [default = inf];
  if (has_max_deterministic_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(67, this->max_deterministic_time(), output);
  }

  // optional int32 num_conflicts_before_strategy_changes = 68 [default = 0];
  if (has_num_conflicts_before_strategy_changes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(68, this->num_conflicts_before_strategy_changes(), output);
  }

  // optional double strategy_change_increase_ratio = 69 [default = 0];
  if (has_strategy_change_increase_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(69, this->strategy_change_increase_ratio(), output);
  }

  // optional string default_restart_algorithms = 70 [default = "LUBY_RESTART,LBD_MOVING_AVERAGE_RESTART,DL_MOVING_AVERAGE_RESTART"];
  if (has_default_restart_algorithms()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->default_restart_algorithms().data(), this->default_restart_algorithms().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "default_restart_algorithms");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      70, this->default_restart_algorithms(), output);
  }

  // optional double restart_lbd_average_ratio = 71 [default = 0.8];
  if (has_restart_lbd_average_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(71, this->restart_lbd_average_ratio(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.sat.SatParameters)
}

::google::protobuf::uint8* SatParameters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.SatParameters)
  // optional .operations_research.sat.SatParameters.VariableOrder preferred_variable_order = 1 [default = IN_ORDER];
  if (has_preferred_variable_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->preferred_variable_order(), target);
  }

  // optional .operations_research.sat.SatParameters.Polarity initial_polarity = 2 [default = POLARITY_FALSE];
  if (has_initial_polarity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->initial_polarity(), target);
  }

  // optional .operations_research.sat.SatParameters.LiteralOrdering literal_ordering = 3 [default = LITERAL_IN_ORDER];
  if (has_literal_ordering()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->literal_ordering(), target);
  }

  // optional .operations_research.sat.SatParameters.ConflictMinimizationAlgorithm minimization_algorithm = 4 [default = RECURSIVE];
  if (has_minimization_algorithm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->minimization_algorithm(), target);
  }

  // optional int32 clause_cleanup_period = 11 [default = 10000];
  if (has_clause_cleanup_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->clause_cleanup_period(), target);
  }

  // optional int32 clause_cleanup_target = 13 [default = 10000];
  if (has_clause_cleanup_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->clause_cleanup_target(), target);
  }

  // optional double variable_activity_decay = 15 [default = 0.8];
  if (has_variable_activity_decay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->variable_activity_decay(), target);
  }

  // optional double max_variable_activity_value = 16 [default = 1e+100];
  if (has_max_variable_activity_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->max_variable_activity_value(), target);
  }

  // optional double clause_activity_decay = 17 [default = 0.999];
  if (has_clause_activity_decay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->clause_activity_decay(), target);
  }

  // optional double max_clause_activity_value = 18 [default = 1e+020];
  if (has_max_clause_activity_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->max_clause_activity_value(), target);
  }

  // optional bool use_glucose_bump_again_strategy = 21 [default = false];
  if (has_use_glucose_bump_again_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->use_glucose_bump_again_strategy(), target);
  }

  // optional double glucose_max_decay = 22 [default = 0.95];
  if (has_glucose_max_decay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->glucose_max_decay(), target);
  }

  // optional double glucose_decay_increment = 23 [default = 0.01];
  if (has_glucose_decay_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->glucose_decay_increment(), target);
  }

  // optional int32 glucose_decay_increment_period = 24 [default = 5000];
  if (has_glucose_decay_increment_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->glucose_decay_increment_period(), target);
  }

  // optional int32 luby_restart_period = 30 [default = 50];
  if (has_luby_restart_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->luby_restart_period(), target);
  }

  // optional int32 random_seed = 31 [default = 1];
  if (has_random_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->random_seed(), target);
  }

  // optional double random_branches_ratio = 32 [default = 0];
  if (has_random_branches_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->random_branches_ratio(), target);
  }

  // optional bool treat_binary_clauses_separately = 33 [default = true];
  if (has_treat_binary_clauses_separately()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->treat_binary_clauses_separately(), target);
  }

  // optional .operations_research.sat.SatParameters.BinaryMinizationAlgorithm binary_minimization_algorithm = 34 [default = BINARY_MINIMIZATION_FIRST];
  if (has_binary_minimization_algorithm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      34, this->binary_minimization_algorithm(), target);
  }

  // optional bool use_optimization_hints = 35 [default = true];
  if (has_use_optimization_hints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->use_optimization_hints(), target);
  }

  // optional double max_time_in_seconds = 36 [default = inf];
  if (has_max_time_in_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->max_time_in_seconds(), target);
  }

  // optional int64 max_number_of_conflicts = 37 [default = 9223372036854775807];
  if (has_max_number_of_conflicts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(37, this->max_number_of_conflicts(), target);
  }

  // optional int64 max_memory_in_mb = 40 [default = 10000];
  if (has_max_memory_in_mb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(40, this->max_memory_in_mb(), target);
  }

  // optional bool log_search_progress = 41 [default = false];
  if (has_log_search_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->log_search_progress(), target);
  }

  // optional bool unsat_proof = 42 [default = false];
  if (has_unsat_proof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(42, this->unsat_proof(), target);
  }

  // optional bool use_pb_resolution = 43 [default = false];
  if (has_use_pb_resolution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(43, this->use_pb_resolution(), target);
  }

  // optional bool use_phase_saving = 44 [default = true];
  if (has_use_phase_saving()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(44, this->use_phase_saving(), target);
  }

  // optional double random_polarity_ratio = 45 [default = 0];
  if (has_random_polarity_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(45, this->random_polarity_ratio(), target);
  }

  // optional int32 pb_cleanup_increment = 46 [default = 200];
  if (has_pb_cleanup_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->pb_cleanup_increment(), target);
  }

  // optional double pb_cleanup_ratio = 47 [default = 0.5];
  if (has_pb_cleanup_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(47, this->pb_cleanup_ratio(), target);
  }

  // optional bool minimize_reduction_during_pb_resolution = 48 [default = false];
  if (has_minimize_reduction_during_pb_resolution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(48, this->minimize_reduction_during_pb_resolution(), target);
  }

  // optional bool count_assumption_levels_in_lbd = 49 [default = true];
  if (has_count_assumption_levels_in_lbd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(49, this->count_assumption_levels_in_lbd(), target);
  }

  // optional bool minimize_core = 50 [default = true];
  if (has_minimize_core()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(50, this->minimize_core(), target);
  }

  // optional .operations_research.sat.SatParameters.MaxSatAssumptionOrder max_sat_assumption_order = 51 [default = DEFAULT_ASSUMPTION_ORDER];
  if (has_max_sat_assumption_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      51, this->max_sat_assumption_order(), target);
  }

  // optional bool max_sat_reverse_assumption_order = 52 [default = false];
  if (has_max_sat_reverse_assumption_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(52, this->max_sat_reverse_assumption_order(), target);
  }

  // optional .operations_research.sat.SatParameters.MaxSatStratificationAlgorithm max_sat_stratification = 53 [default = STRATIFICATION_DESCENT];
  if (has_max_sat_stratification()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      53, this->max_sat_stratification(), target);
  }

  // optional int32 presolve_bve_threshold = 54 [default = 500];
  if (has_presolve_bve_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(54, this->presolve_bve_threshold(), target);
  }

  // optional int32 presolve_bve_clause_weight = 55 [default = 3];
  if (has_presolve_bve_clause_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(55, this->presolve_bve_clause_weight(), target);
  }

  // optional bool subsumption_during_conflict_analysis = 56 [default = true];
  if (has_subsumption_during_conflict_analysis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(56, this->subsumption_during_conflict_analysis(), target);
  }

  // optional double presolve_probing_deterministic_time_limit = 57 [default = 30];
  if (has_presolve_probing_deterministic_time_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(57, this->presolve_probing_deterministic_time_limit(), target);
  }

  // optional .operations_research.sat.SatParameters.ClauseProtection clause_cleanup_protection = 58 [default = PROTECTION_NONE];
  if (has_clause_cleanup_protection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      58, this->clause_cleanup_protection(), target);
  }

  // optional int32 clause_cleanup_lbd_bound = 59 [default = 5];
  if (has_clause_cleanup_lbd_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(59, this->clause_cleanup_lbd_bound(), target);
  }

  // optional .operations_research.sat.SatParameters.ClauseOrdering clause_cleanup_ordering = 60 [default = CLAUSE_ACTIVITY];
  if (has_clause_cleanup_ordering()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      60, this->clause_cleanup_ordering(), target);
  }

  // repeated .operations_research.sat.SatParameters.RestartAlgorithm restart_algorithms = 61;
  for (int i = 0; i < this->restart_algorithms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      61, this->restart_algorithms(i), target);
  }

  // optional int32 restart_running_window_size = 62 [default = 50];
  if (has_restart_running_window_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->restart_running_window_size(), target);
  }

  // optional double restart_dl_average_ratio = 63 [default = 1];
  if (has_restart_dl_average_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(63, this->restart_dl_average_ratio(), target);
  }

  // optional bool use_blocking_restart = 64 [default = false];
  if (has_use_blocking_restart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(64, this->use_blocking_restart(), target);
  }

  // optional int32 blocking_restart_window_size = 65 [default = 5000];
  if (has_blocking_restart_window_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(65, this->blocking_restart_window_size(), target);
  }

  // optional double blocking_restart_multiplier = 66 [default = 1.4];
  if (has_blocking_restart_multiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(66, this->blocking_restart_multiplier(), target);
  }

  // optional double max_deterministic_time = 67 [default = inf];
  if (has_max_deterministic_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(67, this->max_deterministic_time(), target);
  }

  // optional int32 num_conflicts_before_strategy_changes = 68 [default = 0];
  if (has_num_conflicts_before_strategy_changes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(68, this->num_conflicts_before_strategy_changes(), target);
  }

  // optional double strategy_change_increase_ratio = 69 [default = 0];
  if (has_strategy_change_increase_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(69, this->strategy_change_increase_ratio(), target);
  }

  // optional string default_restart_algorithms = 70 [default = "LUBY_RESTART,LBD_MOVING_AVERAGE_RESTART,DL_MOVING_AVERAGE_RESTART"];
  if (has_default_restart_algorithms()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->default_restart_algorithms().data(), this->default_restart_algorithms().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "default_restart_algorithms");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        70, this->default_restart_algorithms(), target);
  }

  // optional double restart_lbd_average_ratio = 71 [default = 0.8];
  if (has_restart_lbd_average_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(71, this->restart_lbd_average_ratio(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.SatParameters)
  return target;
}

int SatParameters::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .operations_research.sat.SatParameters.VariableOrder preferred_variable_order = 1 [default = IN_ORDER];
    if (has_preferred_variable_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->preferred_variable_order());
    }

    // optional .operations_research.sat.SatParameters.Polarity initial_polarity = 2 [default = POLARITY_FALSE];
    if (has_initial_polarity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->initial_polarity());
    }

    // optional bool use_phase_saving = 44 [default = true];
    if (has_use_phase_saving()) {
      total_size += 2 + 1;
    }

    // optional double random_polarity_ratio = 45 [default = 0];
    if (has_random_polarity_ratio()) {
      total_size += 2 + 8;
    }

    // optional double random_branches_ratio = 32 [default = 0];
    if (has_random_branches_ratio()) {
      total_size += 2 + 8;
    }

    // optional .operations_research.sat.SatParameters.LiteralOrdering literal_ordering = 3 [default = LITERAL_IN_ORDER];
    if (has_literal_ordering()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->literal_ordering());
    }

    // optional .operations_research.sat.SatParameters.ConflictMinimizationAlgorithm minimization_algorithm = 4 [default = RECURSIVE];
    if (has_minimization_algorithm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->minimization_algorithm());
    }

    // optional .operations_research.sat.SatParameters.BinaryMinizationAlgorithm binary_minimization_algorithm = 34 [default = BINARY_MINIMIZATION_FIRST];
    if (has_binary_minimization_algorithm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->binary_minimization_algorithm());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool subsumption_during_conflict_analysis = 56 [default = true];
    if (has_subsumption_during_conflict_analysis()) {
      total_size += 2 + 1;
    }

    // optional int32 clause_cleanup_period = 11 [default = 10000];
    if (has_clause_cleanup_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clause_cleanup_period());
    }

    // optional int32 clause_cleanup_target = 13 [default = 10000];
    if (has_clause_cleanup_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clause_cleanup_target());
    }

    // optional .operations_research.sat.SatParameters.ClauseProtection clause_cleanup_protection = 58 [default = PROTECTION_NONE];
    if (has_clause_cleanup_protection()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->clause_cleanup_protection());
    }

    // optional int32 clause_cleanup_lbd_bound = 59 [default = 5];
    if (has_clause_cleanup_lbd_bound()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clause_cleanup_lbd_bound());
    }

    // optional .operations_research.sat.SatParameters.ClauseOrdering clause_cleanup_ordering = 60 [default = CLAUSE_ACTIVITY];
    if (has_clause_cleanup_ordering()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->clause_cleanup_ordering());
    }

    // optional int32 pb_cleanup_increment = 46 [default = 200];
    if (has_pb_cleanup_increment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pb_cleanup_increment());
    }

    // optional double pb_cleanup_ratio = 47 [default = 0.5];
    if (has_pb_cleanup_ratio()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double variable_activity_decay = 15 [default = 0.8];
    if (has_variable_activity_decay()) {
      total_size += 1 + 8;
    }

    // optional double max_variable_activity_value = 16 [default = 1e+100];
    if (has_max_variable_activity_value()) {
      total_size += 2 + 8;
    }

    // optional double glucose_max_decay = 22 [default = 0.95];
    if (has_glucose_max_decay()) {
      total_size += 2 + 8;
    }

    // optional double glucose_decay_increment = 23 [default = 0.01];
    if (has_glucose_decay_increment()) {
      total_size += 2 + 8;
    }

    // optional int32 glucose_decay_increment_period = 24 [default = 5000];
    if (has_glucose_decay_increment_period()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->glucose_decay_increment_period());
    }

    // optional double clause_activity_decay = 17 [default = 0.999];
    if (has_clause_activity_decay()) {
      total_size += 2 + 8;
    }

    // optional double max_clause_activity_value = 18 [default = 1e+020];
    if (has_max_clause_activity_value()) {
      total_size += 2 + 8;
    }

    // optional bool use_glucose_bump_again_strategy = 21 [default = false];
    if (has_use_glucose_bump_again_strategy()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional string default_restart_algorithms = 70 [default = "LUBY_RESTART,LBD_MOVING_AVERAGE_RESTART,DL_MOVING_AVERAGE_RESTART"];
    if (has_default_restart_algorithms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->default_restart_algorithms());
    }

    // optional int32 luby_restart_period = 30 [default = 50];
    if (has_luby_restart_period()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->luby_restart_period());
    }

    // optional int32 restart_running_window_size = 62 [default = 50];
    if (has_restart_running_window_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->restart_running_window_size());
    }

    // optional double restart_dl_average_ratio = 63 [default = 1];
    if (has_restart_dl_average_ratio()) {
      total_size += 2 + 8;
    }

    // optional double restart_lbd_average_ratio = 71 [default = 0.8];
    if (has_restart_lbd_average_ratio()) {
      total_size += 2 + 8;
    }

    // optional bool use_blocking_restart = 64 [default = false];
    if (has_use_blocking_restart()) {
      total_size += 2 + 1;
    }

    // optional int32 blocking_restart_window_size = 65 [default = 5000];
    if (has_blocking_restart_window_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blocking_restart_window_size());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional double blocking_restart_multiplier = 66 [default = 1.4];
    if (has_blocking_restart_multiplier()) {
      total_size += 2 + 8;
    }

    // optional int32 num_conflicts_before_strategy_changes = 68 [default = 0];
    if (has_num_conflicts_before_strategy_changes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_conflicts_before_strategy_changes());
    }

    // optional double strategy_change_increase_ratio = 69 [default = 0];
    if (has_strategy_change_increase_ratio()) {
      total_size += 2 + 8;
    }

    // optional double max_time_in_seconds = 36 [default = inf];
    if (has_max_time_in_seconds()) {
      total_size += 2 + 8;
    }

    // optional double max_deterministic_time = 67 [default = inf];
    if (has_max_deterministic_time()) {
      total_size += 2 + 8;
    }

    // optional int64 max_number_of_conflicts = 37 [default = 9223372036854775807];
    if (has_max_number_of_conflicts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_number_of_conflicts());
    }

    // optional int64 max_memory_in_mb = 40 [default = 10000];
    if (has_max_memory_in_mb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_memory_in_mb());
    }

    // optional bool treat_binary_clauses_separately = 33 [default = true];
    if (has_treat_binary_clauses_separately()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 random_seed = 31 [default = 1];
    if (has_random_seed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->random_seed());
    }

    // optional bool log_search_progress = 41 [default = false];
    if (has_log_search_progress()) {
      total_size += 2 + 1;
    }

    // optional bool unsat_proof = 42 [default = false];
    if (has_unsat_proof()) {
      total_size += 2 + 1;
    }

    // optional bool use_pb_resolution = 43 [default = false];
    if (has_use_pb_resolution()) {
      total_size += 2 + 1;
    }

    // optional bool minimize_reduction_during_pb_resolution = 48 [default = false];
    if (has_minimize_reduction_during_pb_resolution()) {
      total_size += 2 + 1;
    }

    // optional bool count_assumption_levels_in_lbd = 49 [default = true];
    if (has_count_assumption_levels_in_lbd()) {
      total_size += 2 + 1;
    }

    // optional int32 presolve_bve_threshold = 54 [default = 500];
    if (has_presolve_bve_threshold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->presolve_bve_threshold());
    }

    // optional int32 presolve_bve_clause_weight = 55 [default = 3];
    if (has_presolve_bve_clause_weight()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->presolve_bve_clause_weight());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional double presolve_probing_deterministic_time_limit = 57 [default = 30];
    if (has_presolve_probing_deterministic_time_limit()) {
      total_size += 2 + 8;
    }

    // optional bool use_optimization_hints = 35 [default = true];
    if (has_use_optimization_hints()) {
      total_size += 2 + 1;
    }

    // optional bool minimize_core = 50 [default = true];
    if (has_minimize_core()) {
      total_size += 2 + 1;
    }

    // optional .operations_research.sat.SatParameters.MaxSatAssumptionOrder max_sat_assumption_order = 51 [default = DEFAULT_ASSUMPTION_ORDER];
    if (has_max_sat_assumption_order()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->max_sat_assumption_order());
    }

    // optional bool max_sat_reverse_assumption_order = 52 [default = false];
    if (has_max_sat_reverse_assumption_order()) {
      total_size += 2 + 1;
    }

    // optional .operations_research.sat.SatParameters.MaxSatStratificationAlgorithm max_sat_stratification = 53 [default = STRATIFICATION_DESCENT];
    if (has_max_sat_stratification()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->max_sat_stratification());
    }

  }
  // repeated .operations_research.sat.SatParameters.RestartAlgorithm restart_algorithms = 61;
  {
    int data_size = 0;
    for (int i = 0; i < this->restart_algorithms_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->restart_algorithms(i));
    }
    total_size += 2 * this->restart_algorithms_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SatParameters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SatParameters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SatParameters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SatParameters::MergeFrom(const SatParameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  restart_algorithms_.MergeFrom(from.restart_algorithms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_preferred_variable_order()) {
      set_preferred_variable_order(from.preferred_variable_order());
    }
    if (from.has_initial_polarity()) {
      set_initial_polarity(from.initial_polarity());
    }
    if (from.has_use_phase_saving()) {
      set_use_phase_saving(from.use_phase_saving());
    }
    if (from.has_random_polarity_ratio()) {
      set_random_polarity_ratio(from.random_polarity_ratio());
    }
    if (from.has_random_branches_ratio()) {
      set_random_branches_ratio(from.random_branches_ratio());
    }
    if (from.has_literal_ordering()) {
      set_literal_ordering(from.literal_ordering());
    }
    if (from.has_minimization_algorithm()) {
      set_minimization_algorithm(from.minimization_algorithm());
    }
    if (from.has_binary_minimization_algorithm()) {
      set_binary_minimization_algorithm(from.binary_minimization_algorithm());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_subsumption_during_conflict_analysis()) {
      set_subsumption_during_conflict_analysis(from.subsumption_during_conflict_analysis());
    }
    if (from.has_clause_cleanup_period()) {
      set_clause_cleanup_period(from.clause_cleanup_period());
    }
    if (from.has_clause_cleanup_target()) {
      set_clause_cleanup_target(from.clause_cleanup_target());
    }
    if (from.has_clause_cleanup_protection()) {
      set_clause_cleanup_protection(from.clause_cleanup_protection());
    }
    if (from.has_clause_cleanup_lbd_bound()) {
      set_clause_cleanup_lbd_bound(from.clause_cleanup_lbd_bound());
    }
    if (from.has_clause_cleanup_ordering()) {
      set_clause_cleanup_ordering(from.clause_cleanup_ordering());
    }
    if (from.has_pb_cleanup_increment()) {
      set_pb_cleanup_increment(from.pb_cleanup_increment());
    }
    if (from.has_pb_cleanup_ratio()) {
      set_pb_cleanup_ratio(from.pb_cleanup_ratio());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_variable_activity_decay()) {
      set_variable_activity_decay(from.variable_activity_decay());
    }
    if (from.has_max_variable_activity_value()) {
      set_max_variable_activity_value(from.max_variable_activity_value());
    }
    if (from.has_glucose_max_decay()) {
      set_glucose_max_decay(from.glucose_max_decay());
    }
    if (from.has_glucose_decay_increment()) {
      set_glucose_decay_increment(from.glucose_decay_increment());
    }
    if (from.has_glucose_decay_increment_period()) {
      set_glucose_decay_increment_period(from.glucose_decay_increment_period());
    }
    if (from.has_clause_activity_decay()) {
      set_clause_activity_decay(from.clause_activity_decay());
    }
    if (from.has_max_clause_activity_value()) {
      set_max_clause_activity_value(from.max_clause_activity_value());
    }
    if (from.has_use_glucose_bump_again_strategy()) {
      set_use_glucose_bump_again_strategy(from.use_glucose_bump_again_strategy());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_default_restart_algorithms()) {
      set_default_restart_algorithms(from.default_restart_algorithms());
    }
    if (from.has_luby_restart_period()) {
      set_luby_restart_period(from.luby_restart_period());
    }
    if (from.has_restart_running_window_size()) {
      set_restart_running_window_size(from.restart_running_window_size());
    }
    if (from.has_restart_dl_average_ratio()) {
      set_restart_dl_average_ratio(from.restart_dl_average_ratio());
    }
    if (from.has_restart_lbd_average_ratio()) {
      set_restart_lbd_average_ratio(from.restart_lbd_average_ratio());
    }
    if (from.has_use_blocking_restart()) {
      set_use_blocking_restart(from.use_blocking_restart());
    }
    if (from.has_blocking_restart_window_size()) {
      set_blocking_restart_window_size(from.blocking_restart_window_size());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_blocking_restart_multiplier()) {
      set_blocking_restart_multiplier(from.blocking_restart_multiplier());
    }
    if (from.has_num_conflicts_before_strategy_changes()) {
      set_num_conflicts_before_strategy_changes(from.num_conflicts_before_strategy_changes());
    }
    if (from.has_strategy_change_increase_ratio()) {
      set_strategy_change_increase_ratio(from.strategy_change_increase_ratio());
    }
    if (from.has_max_time_in_seconds()) {
      set_max_time_in_seconds(from.max_time_in_seconds());
    }
    if (from.has_max_deterministic_time()) {
      set_max_deterministic_time(from.max_deterministic_time());
    }
    if (from.has_max_number_of_conflicts()) {
      set_max_number_of_conflicts(from.max_number_of_conflicts());
    }
    if (from.has_max_memory_in_mb()) {
      set_max_memory_in_mb(from.max_memory_in_mb());
    }
    if (from.has_treat_binary_clauses_separately()) {
      set_treat_binary_clauses_separately(from.treat_binary_clauses_separately());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_random_seed()) {
      set_random_seed(from.random_seed());
    }
    if (from.has_log_search_progress()) {
      set_log_search_progress(from.log_search_progress());
    }
    if (from.has_unsat_proof()) {
      set_unsat_proof(from.unsat_proof());
    }
    if (from.has_use_pb_resolution()) {
      set_use_pb_resolution(from.use_pb_resolution());
    }
    if (from.has_minimize_reduction_during_pb_resolution()) {
      set_minimize_reduction_during_pb_resolution(from.minimize_reduction_during_pb_resolution());
    }
    if (from.has_count_assumption_levels_in_lbd()) {
      set_count_assumption_levels_in_lbd(from.count_assumption_levels_in_lbd());
    }
    if (from.has_presolve_bve_threshold()) {
      set_presolve_bve_threshold(from.presolve_bve_threshold());
    }
    if (from.has_presolve_bve_clause_weight()) {
      set_presolve_bve_clause_weight(from.presolve_bve_clause_weight());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_presolve_probing_deterministic_time_limit()) {
      set_presolve_probing_deterministic_time_limit(from.presolve_probing_deterministic_time_limit());
    }
    if (from.has_use_optimization_hints()) {
      set_use_optimization_hints(from.use_optimization_hints());
    }
    if (from.has_minimize_core()) {
      set_minimize_core(from.minimize_core());
    }
    if (from.has_max_sat_assumption_order()) {
      set_max_sat_assumption_order(from.max_sat_assumption_order());
    }
    if (from.has_max_sat_reverse_assumption_order()) {
      set_max_sat_reverse_assumption_order(from.max_sat_reverse_assumption_order());
    }
    if (from.has_max_sat_stratification()) {
      set_max_sat_stratification(from.max_sat_stratification());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SatParameters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SatParameters::CopyFrom(const SatParameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SatParameters::IsInitialized() const {

  return true;
}

void SatParameters::Swap(SatParameters* other) {
  if (other != this) {
    std::swap(preferred_variable_order_, other->preferred_variable_order_);
    std::swap(initial_polarity_, other->initial_polarity_);
    std::swap(use_phase_saving_, other->use_phase_saving_);
    std::swap(random_polarity_ratio_, other->random_polarity_ratio_);
    std::swap(random_branches_ratio_, other->random_branches_ratio_);
    std::swap(literal_ordering_, other->literal_ordering_);
    std::swap(minimization_algorithm_, other->minimization_algorithm_);
    std::swap(binary_minimization_algorithm_, other->binary_minimization_algorithm_);
    std::swap(subsumption_during_conflict_analysis_, other->subsumption_during_conflict_analysis_);
    std::swap(clause_cleanup_period_, other->clause_cleanup_period_);
    std::swap(clause_cleanup_target_, other->clause_cleanup_target_);
    std::swap(clause_cleanup_protection_, other->clause_cleanup_protection_);
    std::swap(clause_cleanup_lbd_bound_, other->clause_cleanup_lbd_bound_);
    std::swap(clause_cleanup_ordering_, other->clause_cleanup_ordering_);
    std::swap(pb_cleanup_increment_, other->pb_cleanup_increment_);
    std::swap(pb_cleanup_ratio_, other->pb_cleanup_ratio_);
    std::swap(variable_activity_decay_, other->variable_activity_decay_);
    std::swap(max_variable_activity_value_, other->max_variable_activity_value_);
    std::swap(glucose_max_decay_, other->glucose_max_decay_);
    std::swap(glucose_decay_increment_, other->glucose_decay_increment_);
    std::swap(glucose_decay_increment_period_, other->glucose_decay_increment_period_);
    std::swap(clause_activity_decay_, other->clause_activity_decay_);
    std::swap(max_clause_activity_value_, other->max_clause_activity_value_);
    std::swap(use_glucose_bump_again_strategy_, other->use_glucose_bump_again_strategy_);
    restart_algorithms_.Swap(&other->restart_algorithms_);
    std::swap(default_restart_algorithms_, other->default_restart_algorithms_);
    std::swap(luby_restart_period_, other->luby_restart_period_);
    std::swap(restart_running_window_size_, other->restart_running_window_size_);
    std::swap(restart_dl_average_ratio_, other->restart_dl_average_ratio_);
    std::swap(restart_lbd_average_ratio_, other->restart_lbd_average_ratio_);
    std::swap(use_blocking_restart_, other->use_blocking_restart_);
    std::swap(blocking_restart_window_size_, other->blocking_restart_window_size_);
    std::swap(blocking_restart_multiplier_, other->blocking_restart_multiplier_);
    std::swap(num_conflicts_before_strategy_changes_, other->num_conflicts_before_strategy_changes_);
    std::swap(strategy_change_increase_ratio_, other->strategy_change_increase_ratio_);
    std::swap(max_time_in_seconds_, other->max_time_in_seconds_);
    std::swap(max_deterministic_time_, other->max_deterministic_time_);
    std::swap(max_number_of_conflicts_, other->max_number_of_conflicts_);
    std::swap(max_memory_in_mb_, other->max_memory_in_mb_);
    std::swap(treat_binary_clauses_separately_, other->treat_binary_clauses_separately_);
    std::swap(random_seed_, other->random_seed_);
    std::swap(log_search_progress_, other->log_search_progress_);
    std::swap(unsat_proof_, other->unsat_proof_);
    std::swap(use_pb_resolution_, other->use_pb_resolution_);
    std::swap(minimize_reduction_during_pb_resolution_, other->minimize_reduction_during_pb_resolution_);
    std::swap(count_assumption_levels_in_lbd_, other->count_assumption_levels_in_lbd_);
    std::swap(presolve_bve_threshold_, other->presolve_bve_threshold_);
    std::swap(presolve_bve_clause_weight_, other->presolve_bve_clause_weight_);
    std::swap(presolve_probing_deterministic_time_limit_, other->presolve_probing_deterministic_time_limit_);
    std::swap(use_optimization_hints_, other->use_optimization_hints_);
    std::swap(minimize_core_, other->minimize_core_);
    std::swap(max_sat_assumption_order_, other->max_sat_assumption_order_);
    std::swap(max_sat_reverse_assumption_order_, other->max_sat_reverse_assumption_order_);
    std::swap(max_sat_stratification_, other->max_sat_stratification_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SatParameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SatParameters_descriptor_;
  metadata.reflection = SatParameters_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sat
}  // namespace operations_research

// @@protoc_insertion_point(global_scope)
