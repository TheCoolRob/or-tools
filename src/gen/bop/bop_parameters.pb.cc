// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bop/bop_parameters.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bop/bop_parameters.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace operations_research {
namespace bop {

namespace {

const ::google::protobuf::Descriptor* BopOptimizerMethod_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BopOptimizerMethod_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BopOptimizerMethod_OptimizerType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BopSolverOptimizerSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BopSolverOptimizerSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* BopParameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BopParameters_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BopParameters_ThreadSynchronizationType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_bop_2fbop_5fparameters_2eproto() {
  protobuf_AddDesc_bop_2fbop_5fparameters_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bop/bop_parameters.proto");
  GOOGLE_CHECK(file != NULL);
  BopOptimizerMethod_descriptor_ = file->message_type(0);
  static const int BopOptimizerMethod_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopOptimizerMethod, type_),
  };
  BopOptimizerMethod_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BopOptimizerMethod_descriptor_,
      BopOptimizerMethod::default_instance_,
      BopOptimizerMethod_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopOptimizerMethod, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopOptimizerMethod, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BopOptimizerMethod));
  BopOptimizerMethod_OptimizerType_descriptor_ = BopOptimizerMethod_descriptor_->enum_type(0);
  BopSolverOptimizerSet_descriptor_ = file->message_type(1);
  static const int BopSolverOptimizerSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopSolverOptimizerSet, methods_),
  };
  BopSolverOptimizerSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BopSolverOptimizerSet_descriptor_,
      BopSolverOptimizerSet::default_instance_,
      BopSolverOptimizerSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopSolverOptimizerSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopSolverOptimizerSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BopSolverOptimizerSet));
  BopParameters_descriptor_ = file->message_type(2);
  static const int BopParameters_offsets_[34] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, max_time_in_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, max_deterministic_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, lp_max_deterministic_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, max_number_of_consecutive_failing_optimizer_calls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, relative_gap_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, max_num_decisions_in_ls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, max_num_broken_constraints_in_ls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, log_search_progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, compute_estimated_impact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, prune_search_tree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, sort_constraints_by_num_terms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, use_random_lns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, random_seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, num_relaxed_vars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, max_number_of_conflicts_in_random_lns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, num_random_lns_tries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, max_number_of_backtracks_in_ls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, use_lp_lns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, use_sat_to_choose_lns_neighbourhood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, max_number_of_conflicts_for_quick_check_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, use_symmetry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, max_number_of_conflicts_in_random_solution_generation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, max_number_of_explored_assignments_per_try_in_ls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, use_transposition_table_in_ls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, use_learned_binary_clauses_in_lp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, number_of_solvers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, synchronization_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, solver_optimizer_sets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, default_solver_optimizer_sets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, use_lp_strong_branching_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, decomposer_num_variables_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, num_bop_solvers_used_by_decomposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, decomposed_problem_min_time_in_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, guided_sat_conflicts_chunk_),
  };
  BopParameters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BopParameters_descriptor_,
      BopParameters::default_instance_,
      BopParameters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BopParameters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BopParameters));
  BopParameters_ThreadSynchronizationType_descriptor_ = BopParameters_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bop_2fbop_5fparameters_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BopOptimizerMethod_descriptor_, &BopOptimizerMethod::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BopSolverOptimizerSet_descriptor_, &BopSolverOptimizerSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BopParameters_descriptor_, &BopParameters::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bop_2fbop_5fparameters_2eproto() {
  delete BopOptimizerMethod::default_instance_;
  delete BopOptimizerMethod_reflection_;
  delete BopSolverOptimizerSet::default_instance_;
  delete BopSolverOptimizerSet_reflection_;
  delete BopParameters::default_instance_;
  delete BopParameters_reflection_;
  delete BopParameters::_default_default_solver_optimizer_sets_;
}

void protobuf_AddDesc_bop_2fbop_5fparameters_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030bop/bop_parameters.proto\022\027operations_r"
    "esearch.bop\"\204\004\n\022BopOptimizerMethod\022G\n\004ty"
    "pe\030\001 \001(\01629.operations_research.bop.BopOp"
    "timizerMethod.OptimizerType\"\244\003\n\rOptimize"
    "rType\022\022\n\016SAT_CORE_BASED\020\000\022\025\n\021SAT_LINEAR_"
    "SEARCH\020\017\022\025\n\021LINEAR_RELAXATION\020\001\022\020\n\014LOCAL"
    "_SEARCH\020\002\022\031\n\025RANDOM_FIRST_SOLUTION\020\003\022\031\n\025"
    "RANDOM_CONSTRAINT_LNS\020\004\022\027\n\023RANDOM_VARIAB"
    "LE_LNS\020\005\022\020\n\014COMPLETE_LNS\020\007\022\025\n\021LP_FIRST_S"
    "OLUTION\020\010\022\034\n\030OBJECTIVE_FIRST_SOLUTION\020\t\022"
    "\036\n\032USER_GUIDED_FIRST_SOLUTION\020\016\022&\n\"RANDO"
    "M_CONSTRAINT_LNS_GUIDED_BY_LP\020\013\022$\n RANDO"
    "M_VARIABLE_LNS_GUIDED_BY_LP\020\014\022\026\n\022RELATIO"
    "N_GRAPH_LNS\020\020\022#\n\037RELATION_GRAPH_LNS_GUID"
    "ED_BY_LP\020\021\"U\n\025BopSolverOptimizerSet\022<\n\007m"
    "ethods\030\001 \003(\0132+.operations_research.bop.B"
    "opOptimizerMethod\"\320\022\n\rBopParameters\022 \n\023m"
    "ax_time_in_seconds\030\001 \001(\001:\003inf\022#\n\026max_det"
    "erministic_time\030\033 \001(\001:\003inf\022$\n\031lp_max_det"
    "erministic_time\030% \001(\001:\0011\0229\n1max_number_o"
    "f_consecutive_failing_optimizer_calls\030# "
    "\001(\005\022\"\n\022relative_gap_limit\030\034 \001(\001:\0060.0001\022"
    "\"\n\027max_num_decisions_in_ls\030\002 \001(\005:\0014\0224\n m"
    "ax_num_broken_constraints_in_ls\030& \001(\005:\n2"
    "147483647\022\"\n\023log_search_progress\030\016 \001(\010:\005"
    "false\022&\n\030compute_estimated_impact\030\003 \001(\010:"
    "\004true\022 \n\021prune_search_tree\030\004 \001(\010:\005false\022"
    ",\n\035sort_constraints_by_num_terms\030\005 \001(\010:\005"
    "false\022\034\n\016use_random_lns\030\006 \001(\010:\004true\022\026\n\013r"
    "andom_seed\030\007 \001(\005:\0010\022\034\n\020num_relaxed_vars\030"
    "\010 \001(\005:\00210\0223\n%max_number_of_conflicts_in_"
    "random_lns\030\t \001(\005:\0042500\022\037\n\024num_random_lns"
    "_tries\030\n \001(\005:\0011\0221\n\036max_number_of_backtra"
    "cks_in_ls\030\013 \001(\003:\t100000000\022\030\n\nuse_lp_lns"
    "\030\014 \001(\010:\004true\0221\n#use_sat_to_choose_lns_ne"
    "ighbourhood\030\017 \001(\010:\004true\0223\n\'max_number_of"
    "_conflicts_for_quick_check\030\020 \001(\005:\00210\022\033\n\014"
    "use_symmetry\030\021 \001(\010:\005false\022B\n5max_number_"
    "of_conflicts_in_random_solution_generati"
    "on\030\024 \001(\005:\003500\022\?\n0max_number_of_explored_"
    "assignments_per_try_in_ls\030\025 \001(\003:\00510000\022+"
    "\n\035use_transposition_table_in_ls\030\026 \001(\010:\004t"
    "rue\022.\n use_learned_binary_clauses_in_lp\030"
    "\027 \001(\010:\004true\022\034\n\021number_of_solvers\030\030 \001(\005:\001"
    "1\022r\n\024synchronization_type\030\031 \001(\0162@.operat"
    "ions_research.bop.BopParameters.ThreadSy"
    "nchronizationType:\022NO_SYNCHRONIZATION\022M\n"
    "\025solver_optimizer_sets\030\032 \003(\0132..operation"
    "s_research.bop.BopSolverOptimizerSet\022\362\005\n"
    "\035default_solver_optimizer_sets\030! \001(\t:\312\005m"
    "ethods:{type:LOCAL_SEARCH }             "
    "          methods:{type:RANDOM_FIRST_SOL"
    "UTION }              methods:{type:LINEA"
    "R_RELAXATION }                  methods:"
    "{type:LP_FIRST_SOLUTION }               "
    "   methods:{type:OBJECTIVE_FIRST_SOLUTIO"
    "N }           methods:{type:USER_GUIDED_"
    "FIRST_SOLUTION }         methods:{type:R"
    "ANDOM_CONSTRAINT_LNS_GUIDED_BY_LP } meth"
    "ods:{type:RANDOM_VARIABLE_LNS_GUIDED_BY_"
    "LP }   methods:{type:RELATION_GRAPH_LNS "
    "}                 methods:{type:RELATION"
    "_GRAPH_LNS_GUIDED_BY_LP }    methods:{ty"
    "pe:RANDOM_CONSTRAINT_LNS }              "
    "methods:{type:RANDOM_VARIABLE_LNS }     "
    "           methods:{type:SAT_CORE_BASED "
    "}                     methods:{type:COMP"
    "LETE_LNS }                       \022&\n\027use"
    "_lp_strong_branching\030\035 \001(\010:\005false\022.\n\"dec"
    "omposer_num_variables_threshold\030\036 \001(\005:\0025"
    "0\0220\n%num_bop_solvers_used_by_decompositi"
    "on\030\037 \001(\005:\0011\0221\n&decomposed_problem_min_ti"
    "me_in_seconds\030$ \001(\001:\0010\022(\n\032guided_sat_con"
    "flicts_chunk\030\" \001(\005:\0041000\"b\n\031ThreadSynchr"
    "onizationType\022\026\n\022NO_SYNCHRONIZATION\020\000\022\023\n"
    "\017SYNCHRONIZE_ALL\020\001\022\030\n\024SYNCHRONIZE_ON_RIG"
    "HT\020\002", 3044);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bop/bop_parameters.proto", &protobuf_RegisterTypes);
  BopOptimizerMethod::default_instance_ = new BopOptimizerMethod();
  BopSolverOptimizerSet::default_instance_ = new BopSolverOptimizerSet();
  BopParameters::_default_default_solver_optimizer_sets_ =
      new ::std::string("methods:{type:LOCAL_SEARCH }                       methods:{type:RANDOM_FIRST_SOLUTION }              methods:{type:LINEAR_RELAXATION }                  methods:{type:LP_FIRST_SOLUTION }                  methods:{type:OBJECTIVE_FIRST_SOLUTION }           methods:{type:USER_GUIDED_FIRST_SOLUTION }         methods:{type:RANDOM_CONSTRAINT_LNS_GUIDED_BY_LP } methods:{type:RANDOM_VARIABLE_LNS_GUIDED_BY_LP }   methods:{type:RELATION_GRAPH_LNS }                 methods:{type:RELATION_GRAPH_LNS_GUIDED_BY_LP }    methods:{type:RANDOM_CONSTRAINT_LNS }              methods:{type:RANDOM_VARIABLE_LNS }                methods:{type:SAT_CORE_BASED }                     methods:{type:COMPLETE_LNS }                       ", 714);
  BopParameters::default_instance_ = new BopParameters();
  BopOptimizerMethod::default_instance_->InitAsDefaultInstance();
  BopSolverOptimizerSet::default_instance_->InitAsDefaultInstance();
  BopParameters::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bop_2fbop_5fparameters_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bop_2fbop_5fparameters_2eproto {
  StaticDescriptorInitializer_bop_2fbop_5fparameters_2eproto() {
    protobuf_AddDesc_bop_2fbop_5fparameters_2eproto();
  }
} static_descriptor_initializer_bop_2fbop_5fparameters_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* BopOptimizerMethod_OptimizerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BopOptimizerMethod_OptimizerType_descriptor_;
}
bool BopOptimizerMethod_OptimizerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BopOptimizerMethod_OptimizerType BopOptimizerMethod::SAT_CORE_BASED;
const BopOptimizerMethod_OptimizerType BopOptimizerMethod::SAT_LINEAR_SEARCH;
const BopOptimizerMethod_OptimizerType BopOptimizerMethod::LINEAR_RELAXATION;
const BopOptimizerMethod_OptimizerType BopOptimizerMethod::LOCAL_SEARCH;
const BopOptimizerMethod_OptimizerType BopOptimizerMethod::RANDOM_FIRST_SOLUTION;
const BopOptimizerMethod_OptimizerType BopOptimizerMethod::RANDOM_CONSTRAINT_LNS;
const BopOptimizerMethod_OptimizerType BopOptimizerMethod::RANDOM_VARIABLE_LNS;
const BopOptimizerMethod_OptimizerType BopOptimizerMethod::COMPLETE_LNS;
const BopOptimizerMethod_OptimizerType BopOptimizerMethod::LP_FIRST_SOLUTION;
const BopOptimizerMethod_OptimizerType BopOptimizerMethod::OBJECTIVE_FIRST_SOLUTION;
const BopOptimizerMethod_OptimizerType BopOptimizerMethod::USER_GUIDED_FIRST_SOLUTION;
const BopOptimizerMethod_OptimizerType BopOptimizerMethod::RANDOM_CONSTRAINT_LNS_GUIDED_BY_LP;
const BopOptimizerMethod_OptimizerType BopOptimizerMethod::RANDOM_VARIABLE_LNS_GUIDED_BY_LP;
const BopOptimizerMethod_OptimizerType BopOptimizerMethod::RELATION_GRAPH_LNS;
const BopOptimizerMethod_OptimizerType BopOptimizerMethod::RELATION_GRAPH_LNS_GUIDED_BY_LP;
const BopOptimizerMethod_OptimizerType BopOptimizerMethod::OptimizerType_MIN;
const BopOptimizerMethod_OptimizerType BopOptimizerMethod::OptimizerType_MAX;
const int BopOptimizerMethod::OptimizerType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BopOptimizerMethod::kTypeFieldNumber;
#endif  // !_MSC_VER

BopOptimizerMethod::BopOptimizerMethod()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.bop.BopOptimizerMethod)
}

void BopOptimizerMethod::InitAsDefaultInstance() {
}

BopOptimizerMethod::BopOptimizerMethod(const BopOptimizerMethod& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.bop.BopOptimizerMethod)
}

void BopOptimizerMethod::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BopOptimizerMethod::~BopOptimizerMethod() {
  // @@protoc_insertion_point(destructor:operations_research.bop.BopOptimizerMethod)
  SharedDtor();
}

void BopOptimizerMethod::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BopOptimizerMethod::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BopOptimizerMethod::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BopOptimizerMethod_descriptor_;
}

const BopOptimizerMethod& BopOptimizerMethod::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bop_2fbop_5fparameters_2eproto();
  return *default_instance_;
}

BopOptimizerMethod* BopOptimizerMethod::default_instance_ = NULL;

BopOptimizerMethod* BopOptimizerMethod::New() const {
  return new BopOptimizerMethod;
}

void BopOptimizerMethod::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BopOptimizerMethod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.bop.BopOptimizerMethod)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .operations_research.bop.BopOptimizerMethod.OptimizerType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::operations_research::bop::BopOptimizerMethod_OptimizerType_IsValid(value)) {
            set_type(static_cast< ::operations_research::bop::BopOptimizerMethod_OptimizerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.bop.BopOptimizerMethod)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.bop.BopOptimizerMethod)
  return false;
#undef DO_
}

void BopOptimizerMethod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.bop.BopOptimizerMethod)
  // optional .operations_research.bop.BopOptimizerMethod.OptimizerType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.bop.BopOptimizerMethod)
}

::google::protobuf::uint8* BopOptimizerMethod::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.bop.BopOptimizerMethod)
  // optional .operations_research.bop.BopOptimizerMethod.OptimizerType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.bop.BopOptimizerMethod)
  return target;
}

int BopOptimizerMethod::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .operations_research.bop.BopOptimizerMethod.OptimizerType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BopOptimizerMethod::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BopOptimizerMethod* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BopOptimizerMethod*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BopOptimizerMethod::MergeFrom(const BopOptimizerMethod& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BopOptimizerMethod::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BopOptimizerMethod::CopyFrom(const BopOptimizerMethod& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BopOptimizerMethod::IsInitialized() const {

  return true;
}

void BopOptimizerMethod::Swap(BopOptimizerMethod* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BopOptimizerMethod::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BopOptimizerMethod_descriptor_;
  metadata.reflection = BopOptimizerMethod_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BopSolverOptimizerSet::kMethodsFieldNumber;
#endif  // !_MSC_VER

BopSolverOptimizerSet::BopSolverOptimizerSet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.bop.BopSolverOptimizerSet)
}

void BopSolverOptimizerSet::InitAsDefaultInstance() {
}

BopSolverOptimizerSet::BopSolverOptimizerSet(const BopSolverOptimizerSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.bop.BopSolverOptimizerSet)
}

void BopSolverOptimizerSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BopSolverOptimizerSet::~BopSolverOptimizerSet() {
  // @@protoc_insertion_point(destructor:operations_research.bop.BopSolverOptimizerSet)
  SharedDtor();
}

void BopSolverOptimizerSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BopSolverOptimizerSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BopSolverOptimizerSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BopSolverOptimizerSet_descriptor_;
}

const BopSolverOptimizerSet& BopSolverOptimizerSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bop_2fbop_5fparameters_2eproto();
  return *default_instance_;
}

BopSolverOptimizerSet* BopSolverOptimizerSet::default_instance_ = NULL;

BopSolverOptimizerSet* BopSolverOptimizerSet::New() const {
  return new BopSolverOptimizerSet;
}

void BopSolverOptimizerSet::Clear() {
  methods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BopSolverOptimizerSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.bop.BopSolverOptimizerSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .operations_research.bop.BopOptimizerMethod methods = 1;
      case 1: {
        if (tag == 10) {
         parse_methods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_methods()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_methods;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.bop.BopSolverOptimizerSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.bop.BopSolverOptimizerSet)
  return false;
#undef DO_
}

void BopSolverOptimizerSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.bop.BopSolverOptimizerSet)
  // repeated .operations_research.bop.BopOptimizerMethod methods = 1;
  for (int i = 0; i < this->methods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->methods(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.bop.BopSolverOptimizerSet)
}

::google::protobuf::uint8* BopSolverOptimizerSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.bop.BopSolverOptimizerSet)
  // repeated .operations_research.bop.BopOptimizerMethod methods = 1;
  for (int i = 0; i < this->methods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->methods(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.bop.BopSolverOptimizerSet)
  return target;
}

int BopSolverOptimizerSet::ByteSize() const {
  int total_size = 0;

  // repeated .operations_research.bop.BopOptimizerMethod methods = 1;
  total_size += 1 * this->methods_size();
  for (int i = 0; i < this->methods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->methods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BopSolverOptimizerSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BopSolverOptimizerSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BopSolverOptimizerSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BopSolverOptimizerSet::MergeFrom(const BopSolverOptimizerSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  methods_.MergeFrom(from.methods_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BopSolverOptimizerSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BopSolverOptimizerSet::CopyFrom(const BopSolverOptimizerSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BopSolverOptimizerSet::IsInitialized() const {

  return true;
}

void BopSolverOptimizerSet::Swap(BopSolverOptimizerSet* other) {
  if (other != this) {
    methods_.Swap(&other->methods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BopSolverOptimizerSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BopSolverOptimizerSet_descriptor_;
  metadata.reflection = BopSolverOptimizerSet_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BopParameters_ThreadSynchronizationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BopParameters_ThreadSynchronizationType_descriptor_;
}
bool BopParameters_ThreadSynchronizationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BopParameters_ThreadSynchronizationType BopParameters::NO_SYNCHRONIZATION;
const BopParameters_ThreadSynchronizationType BopParameters::SYNCHRONIZE_ALL;
const BopParameters_ThreadSynchronizationType BopParameters::SYNCHRONIZE_ON_RIGHT;
const BopParameters_ThreadSynchronizationType BopParameters::ThreadSynchronizationType_MIN;
const BopParameters_ThreadSynchronizationType BopParameters::ThreadSynchronizationType_MAX;
const int BopParameters::ThreadSynchronizationType_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* BopParameters::_default_default_solver_optimizer_sets_ = NULL;
#ifndef _MSC_VER
const int BopParameters::kMaxTimeInSecondsFieldNumber;
const int BopParameters::kMaxDeterministicTimeFieldNumber;
const int BopParameters::kLpMaxDeterministicTimeFieldNumber;
const int BopParameters::kMaxNumberOfConsecutiveFailingOptimizerCallsFieldNumber;
const int BopParameters::kRelativeGapLimitFieldNumber;
const int BopParameters::kMaxNumDecisionsInLsFieldNumber;
const int BopParameters::kMaxNumBrokenConstraintsInLsFieldNumber;
const int BopParameters::kLogSearchProgressFieldNumber;
const int BopParameters::kComputeEstimatedImpactFieldNumber;
const int BopParameters::kPruneSearchTreeFieldNumber;
const int BopParameters::kSortConstraintsByNumTermsFieldNumber;
const int BopParameters::kUseRandomLnsFieldNumber;
const int BopParameters::kRandomSeedFieldNumber;
const int BopParameters::kNumRelaxedVarsFieldNumber;
const int BopParameters::kMaxNumberOfConflictsInRandomLnsFieldNumber;
const int BopParameters::kNumRandomLnsTriesFieldNumber;
const int BopParameters::kMaxNumberOfBacktracksInLsFieldNumber;
const int BopParameters::kUseLpLnsFieldNumber;
const int BopParameters::kUseSatToChooseLnsNeighbourhoodFieldNumber;
const int BopParameters::kMaxNumberOfConflictsForQuickCheckFieldNumber;
const int BopParameters::kUseSymmetryFieldNumber;
const int BopParameters::kMaxNumberOfConflictsInRandomSolutionGenerationFieldNumber;
const int BopParameters::kMaxNumberOfExploredAssignmentsPerTryInLsFieldNumber;
const int BopParameters::kUseTranspositionTableInLsFieldNumber;
const int BopParameters::kUseLearnedBinaryClausesInLpFieldNumber;
const int BopParameters::kNumberOfSolversFieldNumber;
const int BopParameters::kSynchronizationTypeFieldNumber;
const int BopParameters::kSolverOptimizerSetsFieldNumber;
const int BopParameters::kDefaultSolverOptimizerSetsFieldNumber;
const int BopParameters::kUseLpStrongBranchingFieldNumber;
const int BopParameters::kDecomposerNumVariablesThresholdFieldNumber;
const int BopParameters::kNumBopSolversUsedByDecompositionFieldNumber;
const int BopParameters::kDecomposedProblemMinTimeInSecondsFieldNumber;
const int BopParameters::kGuidedSatConflictsChunkFieldNumber;
#endif  // !_MSC_VER

BopParameters::BopParameters()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.bop.BopParameters)
}

void BopParameters::InitAsDefaultInstance() {
}

BopParameters::BopParameters(const BopParameters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.bop.BopParameters)
}

void BopParameters::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  max_time_in_seconds_ = ::google::protobuf::internal::Infinity();
  max_deterministic_time_ = ::google::protobuf::internal::Infinity();
  lp_max_deterministic_time_ = 1;
  max_number_of_consecutive_failing_optimizer_calls_ = 0;
  relative_gap_limit_ = 0.0001;
  max_num_decisions_in_ls_ = 4;
  max_num_broken_constraints_in_ls_ = 2147483647;
  log_search_progress_ = false;
  compute_estimated_impact_ = true;
  prune_search_tree_ = false;
  sort_constraints_by_num_terms_ = false;
  use_random_lns_ = true;
  random_seed_ = 0;
  num_relaxed_vars_ = 10;
  max_number_of_conflicts_in_random_lns_ = 2500;
  num_random_lns_tries_ = 1;
  max_number_of_backtracks_in_ls_ = GOOGLE_LONGLONG(100000000);
  use_lp_lns_ = true;
  use_sat_to_choose_lns_neighbourhood_ = true;
  max_number_of_conflicts_for_quick_check_ = 10;
  use_symmetry_ = false;
  max_number_of_conflicts_in_random_solution_generation_ = 500;
  max_number_of_explored_assignments_per_try_in_ls_ = GOOGLE_LONGLONG(10000);
  use_transposition_table_in_ls_ = true;
  use_learned_binary_clauses_in_lp_ = true;
  number_of_solvers_ = 1;
  synchronization_type_ = 0;
  default_solver_optimizer_sets_ = const_cast< ::std::string*>(_default_default_solver_optimizer_sets_);
  use_lp_strong_branching_ = false;
  decomposer_num_variables_threshold_ = 50;
  num_bop_solvers_used_by_decomposition_ = 1;
  decomposed_problem_min_time_in_seconds_ = 0;
  guided_sat_conflicts_chunk_ = 1000;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BopParameters::~BopParameters() {
  // @@protoc_insertion_point(destructor:operations_research.bop.BopParameters)
  SharedDtor();
}

void BopParameters::SharedDtor() {
  if (default_solver_optimizer_sets_ != _default_default_solver_optimizer_sets_) {
    delete default_solver_optimizer_sets_;
  }
  if (this != default_instance_) {
  }
}

void BopParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BopParameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BopParameters_descriptor_;
}

const BopParameters& BopParameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bop_2fbop_5fparameters_2eproto();
  return *default_instance_;
}

BopParameters* BopParameters::default_instance_ = NULL;

BopParameters* BopParameters::New() const {
  return new BopParameters;
}

void BopParameters::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BopParameters*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    max_time_in_seconds_ = ::google::protobuf::internal::Infinity();
    max_deterministic_time_ = ::google::protobuf::internal::Infinity();
    lp_max_deterministic_time_ = 1;
    max_number_of_consecutive_failing_optimizer_calls_ = 0;
    relative_gap_limit_ = 0.0001;
    max_num_decisions_in_ls_ = 4;
    max_num_broken_constraints_in_ls_ = 2147483647;
    log_search_progress_ = false;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(prune_search_tree_, random_seed_);
    compute_estimated_impact_ = true;
    use_random_lns_ = true;
    num_relaxed_vars_ = 10;
    max_number_of_conflicts_in_random_lns_ = 2500;
    num_random_lns_tries_ = 1;
  }
  if (_has_bits_[16 / 32] & 16711680) {
    max_number_of_backtracks_in_ls_ = GOOGLE_LONGLONG(100000000);
    use_lp_lns_ = true;
    use_sat_to_choose_lns_neighbourhood_ = true;
    max_number_of_conflicts_for_quick_check_ = 10;
    use_symmetry_ = false;
    max_number_of_conflicts_in_random_solution_generation_ = 500;
    max_number_of_explored_assignments_per_try_in_ls_ = GOOGLE_LONGLONG(10000);
    use_transposition_table_in_ls_ = true;
  }
  if (_has_bits_[24 / 32] & 4143972352) {
    ZR_(use_lp_strong_branching_, synchronization_type_);
    use_learned_binary_clauses_in_lp_ = true;
    number_of_solvers_ = 1;
    if (has_default_solver_optimizer_sets()) {
      if (default_solver_optimizer_sets_ != _default_default_solver_optimizer_sets_) {
        default_solver_optimizer_sets_->assign(*_default_default_solver_optimizer_sets_);
      }
    }
    decomposer_num_variables_threshold_ = 50;
    num_bop_solvers_used_by_decomposition_ = 1;
  }
  if (_has_bits_[32 / 32] & 3) {
    decomposed_problem_min_time_in_seconds_ = 0;
    guided_sat_conflicts_chunk_ = 1000;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  solver_optimizer_sets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BopParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.bop.BopParameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double max_time_in_seconds = 1 [default = inf];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_time_in_seconds_)));
          set_has_max_time_in_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_num_decisions_in_ls;
        break;
      }

      // optional int32 max_num_decisions_in_ls = 2 [default = 4];
      case 2: {
        if (tag == 16) {
         parse_max_num_decisions_in_ls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_num_decisions_in_ls_)));
          set_has_max_num_decisions_in_ls();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_compute_estimated_impact;
        break;
      }

      // optional bool compute_estimated_impact = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_compute_estimated_impact:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compute_estimated_impact_)));
          set_has_compute_estimated_impact();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_prune_search_tree;
        break;
      }

      // optional bool prune_search_tree = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_prune_search_tree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prune_search_tree_)));
          set_has_prune_search_tree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sort_constraints_by_num_terms;
        break;
      }

      // optional bool sort_constraints_by_num_terms = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_sort_constraints_by_num_terms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sort_constraints_by_num_terms_)));
          set_has_sort_constraints_by_num_terms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_use_random_lns;
        break;
      }

      // optional bool use_random_lns = 6 [default = true];
      case 6: {
        if (tag == 48) {
         parse_use_random_lns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_random_lns_)));
          set_has_use_random_lns();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_random_seed;
        break;
      }

      // optional int32 random_seed = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_random_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &random_seed_)));
          set_has_random_seed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_num_relaxed_vars;
        break;
      }

      // optional int32 num_relaxed_vars = 8 [default = 10];
      case 8: {
        if (tag == 64) {
         parse_num_relaxed_vars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_relaxed_vars_)));
          set_has_num_relaxed_vars();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_max_number_of_conflicts_in_random_lns;
        break;
      }

      // optional int32 max_number_of_conflicts_in_random_lns = 9 [default = 2500];
      case 9: {
        if (tag == 72) {
         parse_max_number_of_conflicts_in_random_lns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_number_of_conflicts_in_random_lns_)));
          set_has_max_number_of_conflicts_in_random_lns();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_num_random_lns_tries;
        break;
      }

      // optional int32 num_random_lns_tries = 10 [default = 1];
      case 10: {
        if (tag == 80) {
         parse_num_random_lns_tries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_random_lns_tries_)));
          set_has_num_random_lns_tries();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_max_number_of_backtracks_in_ls;
        break;
      }

      // optional int64 max_number_of_backtracks_in_ls = 11 [default = 100000000];
      case 11: {
        if (tag == 88) {
         parse_max_number_of_backtracks_in_ls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_number_of_backtracks_in_ls_)));
          set_has_max_number_of_backtracks_in_ls();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_use_lp_lns;
        break;
      }

      // optional bool use_lp_lns = 12 [default = true];
      case 12: {
        if (tag == 96) {
         parse_use_lp_lns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_lp_lns_)));
          set_has_use_lp_lns();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_log_search_progress;
        break;
      }

      // optional bool log_search_progress = 14 [default = false];
      case 14: {
        if (tag == 112) {
         parse_log_search_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &log_search_progress_)));
          set_has_log_search_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_use_sat_to_choose_lns_neighbourhood;
        break;
      }

      // optional bool use_sat_to_choose_lns_neighbourhood = 15 [default = true];
      case 15: {
        if (tag == 120) {
         parse_use_sat_to_choose_lns_neighbourhood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_sat_to_choose_lns_neighbourhood_)));
          set_has_use_sat_to_choose_lns_neighbourhood();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_max_number_of_conflicts_for_quick_check;
        break;
      }

      // optional int32 max_number_of_conflicts_for_quick_check = 16 [default = 10];
      case 16: {
        if (tag == 128) {
         parse_max_number_of_conflicts_for_quick_check:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_number_of_conflicts_for_quick_check_)));
          set_has_max_number_of_conflicts_for_quick_check();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_use_symmetry;
        break;
      }

      // optional bool use_symmetry = 17 [default = false];
      case 17: {
        if (tag == 136) {
         parse_use_symmetry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_symmetry_)));
          set_has_use_symmetry();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_max_number_of_conflicts_in_random_solution_generation;
        break;
      }

      // optional int32 max_number_of_conflicts_in_random_solution_generation = 20 [default = 500];
      case 20: {
        if (tag == 160) {
         parse_max_number_of_conflicts_in_random_solution_generation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_number_of_conflicts_in_random_solution_generation_)));
          set_has_max_number_of_conflicts_in_random_solution_generation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_max_number_of_explored_assignments_per_try_in_ls;
        break;
      }

      // optional int64 max_number_of_explored_assignments_per_try_in_ls = 21 [default = 10000];
      case 21: {
        if (tag == 168) {
         parse_max_number_of_explored_assignments_per_try_in_ls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_number_of_explored_assignments_per_try_in_ls_)));
          set_has_max_number_of_explored_assignments_per_try_in_ls();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_use_transposition_table_in_ls;
        break;
      }

      // optional bool use_transposition_table_in_ls = 22 [default = true];
      case 22: {
        if (tag == 176) {
         parse_use_transposition_table_in_ls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_transposition_table_in_ls_)));
          set_has_use_transposition_table_in_ls();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_use_learned_binary_clauses_in_lp;
        break;
      }

      // optional bool use_learned_binary_clauses_in_lp = 23 [default = true];
      case 23: {
        if (tag == 184) {
         parse_use_learned_binary_clauses_in_lp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_learned_binary_clauses_in_lp_)));
          set_has_use_learned_binary_clauses_in_lp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_number_of_solvers;
        break;
      }

      // optional int32 number_of_solvers = 24 [default = 1];
      case 24: {
        if (tag == 192) {
         parse_number_of_solvers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_of_solvers_)));
          set_has_number_of_solvers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_synchronization_type;
        break;
      }

      // optional .operations_research.bop.BopParameters.ThreadSynchronizationType synchronization_type = 25 [default = NO_SYNCHRONIZATION];
      case 25: {
        if (tag == 200) {
         parse_synchronization_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::operations_research::bop::BopParameters_ThreadSynchronizationType_IsValid(value)) {
            set_synchronization_type(static_cast< ::operations_research::bop::BopParameters_ThreadSynchronizationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(25, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_solver_optimizer_sets;
        break;
      }

      // repeated .operations_research.bop.BopSolverOptimizerSet solver_optimizer_sets = 26;
      case 26: {
        if (tag == 210) {
         parse_solver_optimizer_sets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_solver_optimizer_sets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_solver_optimizer_sets;
        if (input->ExpectTag(217)) goto parse_max_deterministic_time;
        break;
      }

      // optional double max_deterministic_time = 27 [default = inf];
      case 27: {
        if (tag == 217) {
         parse_max_deterministic_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_deterministic_time_)));
          set_has_max_deterministic_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(225)) goto parse_relative_gap_limit;
        break;
      }

      // optional double relative_gap_limit = 28 [default = 0.0001];
      case 28: {
        if (tag == 225) {
         parse_relative_gap_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_gap_limit_)));
          set_has_relative_gap_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_use_lp_strong_branching;
        break;
      }

      // optional bool use_lp_strong_branching = 29 [default = false];
      case 29: {
        if (tag == 232) {
         parse_use_lp_strong_branching:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_lp_strong_branching_)));
          set_has_use_lp_strong_branching();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_decomposer_num_variables_threshold;
        break;
      }

      // optional int32 decomposer_num_variables_threshold = 30 [default = 50];
      case 30: {
        if (tag == 240) {
         parse_decomposer_num_variables_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decomposer_num_variables_threshold_)));
          set_has_decomposer_num_variables_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_num_bop_solvers_used_by_decomposition;
        break;
      }

      // optional int32 num_bop_solvers_used_by_decomposition = 31 [default = 1];
      case 31: {
        if (tag == 248) {
         parse_num_bop_solvers_used_by_decomposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_bop_solvers_used_by_decomposition_)));
          set_has_num_bop_solvers_used_by_decomposition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_default_solver_optimizer_sets;
        break;
      }

      // optional string default_solver_optimizer_sets = 33 [default = "methods:{type:LOCAL_SEARCH }                       methods:{type:RANDOM_FIRST_SOLUTION }              methods:{type:LINEAR_RELAXATION }                  methods:{type:LP_FIRST_SOLUTION }                  methods:{type:OBJECTIVE_FIRST_SOLUTION }           methods:{type:USER_GUIDED_FIRST_SOLUTION }         methods:{type:RANDOM_CONSTRAINT_LNS_GUIDED_BY_LP } methods:{type:RANDOM_VARIABLE_LNS_GUIDED_BY_LP }   methods:{type:RELATION_GRAPH_LNS }                 methods:{type:RELATION_GRAPH_LNS_GUIDED_BY_LP }    methods:{type:RANDOM_CONSTRAINT_LNS }              methods:{type:RANDOM_VARIABLE_LNS }                methods:{type:SAT_CORE_BASED }                     methods:{type:COMPLETE_LNS }                       "];
      case 33: {
        if (tag == 266) {
         parse_default_solver_optimizer_sets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_default_solver_optimizer_sets()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->default_solver_optimizer_sets().data(), this->default_solver_optimizer_sets().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "default_solver_optimizer_sets");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_guided_sat_conflicts_chunk;
        break;
      }

      // optional int32 guided_sat_conflicts_chunk = 34 [default = 1000];
      case 34: {
        if (tag == 272) {
         parse_guided_sat_conflicts_chunk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guided_sat_conflicts_chunk_)));
          set_has_guided_sat_conflicts_chunk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_max_number_of_consecutive_failing_optimizer_calls;
        break;
      }

      // optional int32 max_number_of_consecutive_failing_optimizer_calls = 35;
      case 35: {
        if (tag == 280) {
         parse_max_number_of_consecutive_failing_optimizer_calls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_number_of_consecutive_failing_optimizer_calls_)));
          set_has_max_number_of_consecutive_failing_optimizer_calls();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(289)) goto parse_decomposed_problem_min_time_in_seconds;
        break;
      }

      // optional double decomposed_problem_min_time_in_seconds = 36 [default = 0];
      case 36: {
        if (tag == 289) {
         parse_decomposed_problem_min_time_in_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &decomposed_problem_min_time_in_seconds_)));
          set_has_decomposed_problem_min_time_in_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(297)) goto parse_lp_max_deterministic_time;
        break;
      }

      // optional double lp_max_deterministic_time = 37 [default = 1];
      case 37: {
        if (tag == 297) {
         parse_lp_max_deterministic_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lp_max_deterministic_time_)));
          set_has_lp_max_deterministic_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_max_num_broken_constraints_in_ls;
        break;
      }

      // optional int32 max_num_broken_constraints_in_ls = 38 [default = 2147483647];
      case 38: {
        if (tag == 304) {
         parse_max_num_broken_constraints_in_ls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_num_broken_constraints_in_ls_)));
          set_has_max_num_broken_constraints_in_ls();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.bop.BopParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.bop.BopParameters)
  return false;
#undef DO_
}

void BopParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.bop.BopParameters)
  // optional double max_time_in_seconds = 1 [default = inf];
  if (has_max_time_in_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->max_time_in_seconds(), output);
  }

  // optional int32 max_num_decisions_in_ls = 2 [default = 4];
  if (has_max_num_decisions_in_ls()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_num_decisions_in_ls(), output);
  }

  // optional bool compute_estimated_impact = 3 [default = true];
  if (has_compute_estimated_impact()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->compute_estimated_impact(), output);
  }

  // optional bool prune_search_tree = 4 [default = false];
  if (has_prune_search_tree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->prune_search_tree(), output);
  }

  // optional bool sort_constraints_by_num_terms = 5 [default = false];
  if (has_sort_constraints_by_num_terms()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->sort_constraints_by_num_terms(), output);
  }

  // optional bool use_random_lns = 6 [default = true];
  if (has_use_random_lns()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->use_random_lns(), output);
  }

  // optional int32 random_seed = 7 [default = 0];
  if (has_random_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->random_seed(), output);
  }

  // optional int32 num_relaxed_vars = 8 [default = 10];
  if (has_num_relaxed_vars()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->num_relaxed_vars(), output);
  }

  // optional int32 max_number_of_conflicts_in_random_lns = 9 [default = 2500];
  if (has_max_number_of_conflicts_in_random_lns()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->max_number_of_conflicts_in_random_lns(), output);
  }

  // optional int32 num_random_lns_tries = 10 [default = 1];
  if (has_num_random_lns_tries()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->num_random_lns_tries(), output);
  }

  // optional int64 max_number_of_backtracks_in_ls = 11 [default = 100000000];
  if (has_max_number_of_backtracks_in_ls()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->max_number_of_backtracks_in_ls(), output);
  }

  // optional bool use_lp_lns = 12 [default = true];
  if (has_use_lp_lns()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->use_lp_lns(), output);
  }

  // optional bool log_search_progress = 14 [default = false];
  if (has_log_search_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->log_search_progress(), output);
  }

  // optional bool use_sat_to_choose_lns_neighbourhood = 15 [default = true];
  if (has_use_sat_to_choose_lns_neighbourhood()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->use_sat_to_choose_lns_neighbourhood(), output);
  }

  // optional int32 max_number_of_conflicts_for_quick_check = 16 [default = 10];
  if (has_max_number_of_conflicts_for_quick_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->max_number_of_conflicts_for_quick_check(), output);
  }

  // optional bool use_symmetry = 17 [default = false];
  if (has_use_symmetry()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->use_symmetry(), output);
  }

  // optional int32 max_number_of_conflicts_in_random_solution_generation = 20 [default = 500];
  if (has_max_number_of_conflicts_in_random_solution_generation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->max_number_of_conflicts_in_random_solution_generation(), output);
  }

  // optional int64 max_number_of_explored_assignments_per_try_in_ls = 21 [default = 10000];
  if (has_max_number_of_explored_assignments_per_try_in_ls()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->max_number_of_explored_assignments_per_try_in_ls(), output);
  }

  // optional bool use_transposition_table_in_ls = 22 [default = true];
  if (has_use_transposition_table_in_ls()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->use_transposition_table_in_ls(), output);
  }

  // optional bool use_learned_binary_clauses_in_lp = 23 [default = true];
  if (has_use_learned_binary_clauses_in_lp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->use_learned_binary_clauses_in_lp(), output);
  }

  // optional int32 number_of_solvers = 24 [default = 1];
  if (has_number_of_solvers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->number_of_solvers(), output);
  }

  // optional .operations_research.bop.BopParameters.ThreadSynchronizationType synchronization_type = 25 [default = NO_SYNCHRONIZATION];
  if (has_synchronization_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->synchronization_type(), output);
  }

  // repeated .operations_research.bop.BopSolverOptimizerSet solver_optimizer_sets = 26;
  for (int i = 0; i < this->solver_optimizer_sets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->solver_optimizer_sets(i), output);
  }

  // optional double max_deterministic_time = 27 [default = inf];
  if (has_max_deterministic_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->max_deterministic_time(), output);
  }

  // optional double relative_gap_limit = 28 [default = 0.0001];
  if (has_relative_gap_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->relative_gap_limit(), output);
  }

  // optional bool use_lp_strong_branching = 29 [default = false];
  if (has_use_lp_strong_branching()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->use_lp_strong_branching(), output);
  }

  // optional int32 decomposer_num_variables_threshold = 30 [default = 50];
  if (has_decomposer_num_variables_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->decomposer_num_variables_threshold(), output);
  }

  // optional int32 num_bop_solvers_used_by_decomposition = 31 [default = 1];
  if (has_num_bop_solvers_used_by_decomposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->num_bop_solvers_used_by_decomposition(), output);
  }

  // optional string default_solver_optimizer_sets = 33 [default = "methods:{type:LOCAL_SEARCH }                       methods:{type:RANDOM_FIRST_SOLUTION }              methods:{type:LINEAR_RELAXATION }                  methods:{type:LP_FIRST_SOLUTION }                  methods:{type:OBJECTIVE_FIRST_SOLUTION }           methods:{type:USER_GUIDED_FIRST_SOLUTION }         methods:{type:RANDOM_CONSTRAINT_LNS_GUIDED_BY_LP } methods:{type:RANDOM_VARIABLE_LNS_GUIDED_BY_LP }   methods:{type:RELATION_GRAPH_LNS }                 methods:{type:RELATION_GRAPH_LNS_GUIDED_BY_LP }    methods:{type:RANDOM_CONSTRAINT_LNS }              methods:{type:RANDOM_VARIABLE_LNS }                methods:{type:SAT_CORE_BASED }                     methods:{type:COMPLETE_LNS }                       "];
  if (has_default_solver_optimizer_sets()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->default_solver_optimizer_sets().data(), this->default_solver_optimizer_sets().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "default_solver_optimizer_sets");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->default_solver_optimizer_sets(), output);
  }

  // optional int32 guided_sat_conflicts_chunk = 34 [default = 1000];
  if (has_guided_sat_conflicts_chunk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->guided_sat_conflicts_chunk(), output);
  }

  // optional int32 max_number_of_consecutive_failing_optimizer_calls = 35;
  if (has_max_number_of_consecutive_failing_optimizer_calls()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->max_number_of_consecutive_failing_optimizer_calls(), output);
  }

  // optional double decomposed_problem_min_time_in_seconds = 36 [default = 0];
  if (has_decomposed_problem_min_time_in_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->decomposed_problem_min_time_in_seconds(), output);
  }

  // optional double lp_max_deterministic_time = 37 [default = 1];
  if (has_lp_max_deterministic_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->lp_max_deterministic_time(), output);
  }

  // optional int32 max_num_broken_constraints_in_ls = 38 [default = 2147483647];
  if (has_max_num_broken_constraints_in_ls()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->max_num_broken_constraints_in_ls(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.bop.BopParameters)
}

::google::protobuf::uint8* BopParameters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.bop.BopParameters)
  // optional double max_time_in_seconds = 1 [default = inf];
  if (has_max_time_in_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->max_time_in_seconds(), target);
  }

  // optional int32 max_num_decisions_in_ls = 2 [default = 4];
  if (has_max_num_decisions_in_ls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_num_decisions_in_ls(), target);
  }

  // optional bool compute_estimated_impact = 3 [default = true];
  if (has_compute_estimated_impact()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->compute_estimated_impact(), target);
  }

  // optional bool prune_search_tree = 4 [default = false];
  if (has_prune_search_tree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->prune_search_tree(), target);
  }

  // optional bool sort_constraints_by_num_terms = 5 [default = false];
  if (has_sort_constraints_by_num_terms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->sort_constraints_by_num_terms(), target);
  }

  // optional bool use_random_lns = 6 [default = true];
  if (has_use_random_lns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->use_random_lns(), target);
  }

  // optional int32 random_seed = 7 [default = 0];
  if (has_random_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->random_seed(), target);
  }

  // optional int32 num_relaxed_vars = 8 [default = 10];
  if (has_num_relaxed_vars()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->num_relaxed_vars(), target);
  }

  // optional int32 max_number_of_conflicts_in_random_lns = 9 [default = 2500];
  if (has_max_number_of_conflicts_in_random_lns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->max_number_of_conflicts_in_random_lns(), target);
  }

  // optional int32 num_random_lns_tries = 10 [default = 1];
  if (has_num_random_lns_tries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->num_random_lns_tries(), target);
  }

  // optional int64 max_number_of_backtracks_in_ls = 11 [default = 100000000];
  if (has_max_number_of_backtracks_in_ls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->max_number_of_backtracks_in_ls(), target);
  }

  // optional bool use_lp_lns = 12 [default = true];
  if (has_use_lp_lns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->use_lp_lns(), target);
  }

  // optional bool log_search_progress = 14 [default = false];
  if (has_log_search_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->log_search_progress(), target);
  }

  // optional bool use_sat_to_choose_lns_neighbourhood = 15 [default = true];
  if (has_use_sat_to_choose_lns_neighbourhood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->use_sat_to_choose_lns_neighbourhood(), target);
  }

  // optional int32 max_number_of_conflicts_for_quick_check = 16 [default = 10];
  if (has_max_number_of_conflicts_for_quick_check()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->max_number_of_conflicts_for_quick_check(), target);
  }

  // optional bool use_symmetry = 17 [default = false];
  if (has_use_symmetry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->use_symmetry(), target);
  }

  // optional int32 max_number_of_conflicts_in_random_solution_generation = 20 [default = 500];
  if (has_max_number_of_conflicts_in_random_solution_generation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->max_number_of_conflicts_in_random_solution_generation(), target);
  }

  // optional int64 max_number_of_explored_assignments_per_try_in_ls = 21 [default = 10000];
  if (has_max_number_of_explored_assignments_per_try_in_ls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->max_number_of_explored_assignments_per_try_in_ls(), target);
  }

  // optional bool use_transposition_table_in_ls = 22 [default = true];
  if (has_use_transposition_table_in_ls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->use_transposition_table_in_ls(), target);
  }

  // optional bool use_learned_binary_clauses_in_lp = 23 [default = true];
  if (has_use_learned_binary_clauses_in_lp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->use_learned_binary_clauses_in_lp(), target);
  }

  // optional int32 number_of_solvers = 24 [default = 1];
  if (has_number_of_solvers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->number_of_solvers(), target);
  }

  // optional .operations_research.bop.BopParameters.ThreadSynchronizationType synchronization_type = 25 [default = NO_SYNCHRONIZATION];
  if (has_synchronization_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      25, this->synchronization_type(), target);
  }

  // repeated .operations_research.bop.BopSolverOptimizerSet solver_optimizer_sets = 26;
  for (int i = 0; i < this->solver_optimizer_sets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->solver_optimizer_sets(i), target);
  }

  // optional double max_deterministic_time = 27 [default = inf];
  if (has_max_deterministic_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->max_deterministic_time(), target);
  }

  // optional double relative_gap_limit = 28 [default = 0.0001];
  if (has_relative_gap_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->relative_gap_limit(), target);
  }

  // optional bool use_lp_strong_branching = 29 [default = false];
  if (has_use_lp_strong_branching()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->use_lp_strong_branching(), target);
  }

  // optional int32 decomposer_num_variables_threshold = 30 [default = 50];
  if (has_decomposer_num_variables_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->decomposer_num_variables_threshold(), target);
  }

  // optional int32 num_bop_solvers_used_by_decomposition = 31 [default = 1];
  if (has_num_bop_solvers_used_by_decomposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->num_bop_solvers_used_by_decomposition(), target);
  }

  // optional string default_solver_optimizer_sets = 33 [default = "methods:{type:LOCAL_SEARCH }                       methods:{type:RANDOM_FIRST_SOLUTION }              methods:{type:LINEAR_RELAXATION }                  methods:{type:LP_FIRST_SOLUTION }                  methods:{type:OBJECTIVE_FIRST_SOLUTION }           methods:{type:USER_GUIDED_FIRST_SOLUTION }         methods:{type:RANDOM_CONSTRAINT_LNS_GUIDED_BY_LP } methods:{type:RANDOM_VARIABLE_LNS_GUIDED_BY_LP }   methods:{type:RELATION_GRAPH_LNS }                 methods:{type:RELATION_GRAPH_LNS_GUIDED_BY_LP }    methods:{type:RANDOM_CONSTRAINT_LNS }              methods:{type:RANDOM_VARIABLE_LNS }                methods:{type:SAT_CORE_BASED }                     methods:{type:COMPLETE_LNS }                       "];
  if (has_default_solver_optimizer_sets()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->default_solver_optimizer_sets().data(), this->default_solver_optimizer_sets().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "default_solver_optimizer_sets");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->default_solver_optimizer_sets(), target);
  }

  // optional int32 guided_sat_conflicts_chunk = 34 [default = 1000];
  if (has_guided_sat_conflicts_chunk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->guided_sat_conflicts_chunk(), target);
  }

  // optional int32 max_number_of_consecutive_failing_optimizer_calls = 35;
  if (has_max_number_of_consecutive_failing_optimizer_calls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->max_number_of_consecutive_failing_optimizer_calls(), target);
  }

  // optional double decomposed_problem_min_time_in_seconds = 36 [default = 0];
  if (has_decomposed_problem_min_time_in_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->decomposed_problem_min_time_in_seconds(), target);
  }

  // optional double lp_max_deterministic_time = 37 [default = 1];
  if (has_lp_max_deterministic_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->lp_max_deterministic_time(), target);
  }

  // optional int32 max_num_broken_constraints_in_ls = 38 [default = 2147483647];
  if (has_max_num_broken_constraints_in_ls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->max_num_broken_constraints_in_ls(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.bop.BopParameters)
  return target;
}

int BopParameters::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double max_time_in_seconds = 1 [default = inf];
    if (has_max_time_in_seconds()) {
      total_size += 1 + 8;
    }

    // optional double max_deterministic_time = 27 [default = inf];
    if (has_max_deterministic_time()) {
      total_size += 2 + 8;
    }

    // optional double lp_max_deterministic_time = 37 [default = 1];
    if (has_lp_max_deterministic_time()) {
      total_size += 2 + 8;
    }

    // optional int32 max_number_of_consecutive_failing_optimizer_calls = 35;
    if (has_max_number_of_consecutive_failing_optimizer_calls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_number_of_consecutive_failing_optimizer_calls());
    }

    // optional double relative_gap_limit = 28 [default = 0.0001];
    if (has_relative_gap_limit()) {
      total_size += 2 + 8;
    }

    // optional int32 max_num_decisions_in_ls = 2 [default = 4];
    if (has_max_num_decisions_in_ls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_num_decisions_in_ls());
    }

    // optional int32 max_num_broken_constraints_in_ls = 38 [default = 2147483647];
    if (has_max_num_broken_constraints_in_ls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_num_broken_constraints_in_ls());
    }

    // optional bool log_search_progress = 14 [default = false];
    if (has_log_search_progress()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool compute_estimated_impact = 3 [default = true];
    if (has_compute_estimated_impact()) {
      total_size += 1 + 1;
    }

    // optional bool prune_search_tree = 4 [default = false];
    if (has_prune_search_tree()) {
      total_size += 1 + 1;
    }

    // optional bool sort_constraints_by_num_terms = 5 [default = false];
    if (has_sort_constraints_by_num_terms()) {
      total_size += 1 + 1;
    }

    // optional bool use_random_lns = 6 [default = true];
    if (has_use_random_lns()) {
      total_size += 1 + 1;
    }

    // optional int32 random_seed = 7 [default = 0];
    if (has_random_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->random_seed());
    }

    // optional int32 num_relaxed_vars = 8 [default = 10];
    if (has_num_relaxed_vars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_relaxed_vars());
    }

    // optional int32 max_number_of_conflicts_in_random_lns = 9 [default = 2500];
    if (has_max_number_of_conflicts_in_random_lns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_number_of_conflicts_in_random_lns());
    }

    // optional int32 num_random_lns_tries = 10 [default = 1];
    if (has_num_random_lns_tries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_random_lns_tries());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 max_number_of_backtracks_in_ls = 11 [default = 100000000];
    if (has_max_number_of_backtracks_in_ls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_number_of_backtracks_in_ls());
    }

    // optional bool use_lp_lns = 12 [default = true];
    if (has_use_lp_lns()) {
      total_size += 1 + 1;
    }

    // optional bool use_sat_to_choose_lns_neighbourhood = 15 [default = true];
    if (has_use_sat_to_choose_lns_neighbourhood()) {
      total_size += 1 + 1;
    }

    // optional int32 max_number_of_conflicts_for_quick_check = 16 [default = 10];
    if (has_max_number_of_conflicts_for_quick_check()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_number_of_conflicts_for_quick_check());
    }

    // optional bool use_symmetry = 17 [default = false];
    if (has_use_symmetry()) {
      total_size += 2 + 1;
    }

    // optional int32 max_number_of_conflicts_in_random_solution_generation = 20 [default = 500];
    if (has_max_number_of_conflicts_in_random_solution_generation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_number_of_conflicts_in_random_solution_generation());
    }

    // optional int64 max_number_of_explored_assignments_per_try_in_ls = 21 [default = 10000];
    if (has_max_number_of_explored_assignments_per_try_in_ls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_number_of_explored_assignments_per_try_in_ls());
    }

    // optional bool use_transposition_table_in_ls = 22 [default = true];
    if (has_use_transposition_table_in_ls()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool use_learned_binary_clauses_in_lp = 23 [default = true];
    if (has_use_learned_binary_clauses_in_lp()) {
      total_size += 2 + 1;
    }

    // optional int32 number_of_solvers = 24 [default = 1];
    if (has_number_of_solvers()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number_of_solvers());
    }

    // optional .operations_research.bop.BopParameters.ThreadSynchronizationType synchronization_type = 25 [default = NO_SYNCHRONIZATION];
    if (has_synchronization_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->synchronization_type());
    }

    // optional string default_solver_optimizer_sets = 33 [default = "methods:{type:LOCAL_SEARCH }                       methods:{type:RANDOM_FIRST_SOLUTION }              methods:{type:LINEAR_RELAXATION }                  methods:{type:LP_FIRST_SOLUTION }                  methods:{type:OBJECTIVE_FIRST_SOLUTION }           methods:{type:USER_GUIDED_FIRST_SOLUTION }         methods:{type:RANDOM_CONSTRAINT_LNS_GUIDED_BY_LP } methods:{type:RANDOM_VARIABLE_LNS_GUIDED_BY_LP }   methods:{type:RELATION_GRAPH_LNS }                 methods:{type:RELATION_GRAPH_LNS_GUIDED_BY_LP }    methods:{type:RANDOM_CONSTRAINT_LNS }              methods:{type:RANDOM_VARIABLE_LNS }                methods:{type:SAT_CORE_BASED }                     methods:{type:COMPLETE_LNS }                       "];
    if (has_default_solver_optimizer_sets()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->default_solver_optimizer_sets());
    }

    // optional bool use_lp_strong_branching = 29 [default = false];
    if (has_use_lp_strong_branching()) {
      total_size += 2 + 1;
    }

    // optional int32 decomposer_num_variables_threshold = 30 [default = 50];
    if (has_decomposer_num_variables_threshold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decomposer_num_variables_threshold());
    }

    // optional int32 num_bop_solvers_used_by_decomposition = 31 [default = 1];
    if (has_num_bop_solvers_used_by_decomposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_bop_solvers_used_by_decomposition());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional double decomposed_problem_min_time_in_seconds = 36 [default = 0];
    if (has_decomposed_problem_min_time_in_seconds()) {
      total_size += 2 + 8;
    }

    // optional int32 guided_sat_conflicts_chunk = 34 [default = 1000];
    if (has_guided_sat_conflicts_chunk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guided_sat_conflicts_chunk());
    }

  }
  // repeated .operations_research.bop.BopSolverOptimizerSet solver_optimizer_sets = 26;
  total_size += 2 * this->solver_optimizer_sets_size();
  for (int i = 0; i < this->solver_optimizer_sets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->solver_optimizer_sets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BopParameters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BopParameters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BopParameters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BopParameters::MergeFrom(const BopParameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  solver_optimizer_sets_.MergeFrom(from.solver_optimizer_sets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_time_in_seconds()) {
      set_max_time_in_seconds(from.max_time_in_seconds());
    }
    if (from.has_max_deterministic_time()) {
      set_max_deterministic_time(from.max_deterministic_time());
    }
    if (from.has_lp_max_deterministic_time()) {
      set_lp_max_deterministic_time(from.lp_max_deterministic_time());
    }
    if (from.has_max_number_of_consecutive_failing_optimizer_calls()) {
      set_max_number_of_consecutive_failing_optimizer_calls(from.max_number_of_consecutive_failing_optimizer_calls());
    }
    if (from.has_relative_gap_limit()) {
      set_relative_gap_limit(from.relative_gap_limit());
    }
    if (from.has_max_num_decisions_in_ls()) {
      set_max_num_decisions_in_ls(from.max_num_decisions_in_ls());
    }
    if (from.has_max_num_broken_constraints_in_ls()) {
      set_max_num_broken_constraints_in_ls(from.max_num_broken_constraints_in_ls());
    }
    if (from.has_log_search_progress()) {
      set_log_search_progress(from.log_search_progress());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_compute_estimated_impact()) {
      set_compute_estimated_impact(from.compute_estimated_impact());
    }
    if (from.has_prune_search_tree()) {
      set_prune_search_tree(from.prune_search_tree());
    }
    if (from.has_sort_constraints_by_num_terms()) {
      set_sort_constraints_by_num_terms(from.sort_constraints_by_num_terms());
    }
    if (from.has_use_random_lns()) {
      set_use_random_lns(from.use_random_lns());
    }
    if (from.has_random_seed()) {
      set_random_seed(from.random_seed());
    }
    if (from.has_num_relaxed_vars()) {
      set_num_relaxed_vars(from.num_relaxed_vars());
    }
    if (from.has_max_number_of_conflicts_in_random_lns()) {
      set_max_number_of_conflicts_in_random_lns(from.max_number_of_conflicts_in_random_lns());
    }
    if (from.has_num_random_lns_tries()) {
      set_num_random_lns_tries(from.num_random_lns_tries());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_max_number_of_backtracks_in_ls()) {
      set_max_number_of_backtracks_in_ls(from.max_number_of_backtracks_in_ls());
    }
    if (from.has_use_lp_lns()) {
      set_use_lp_lns(from.use_lp_lns());
    }
    if (from.has_use_sat_to_choose_lns_neighbourhood()) {
      set_use_sat_to_choose_lns_neighbourhood(from.use_sat_to_choose_lns_neighbourhood());
    }
    if (from.has_max_number_of_conflicts_for_quick_check()) {
      set_max_number_of_conflicts_for_quick_check(from.max_number_of_conflicts_for_quick_check());
    }
    if (from.has_use_symmetry()) {
      set_use_symmetry(from.use_symmetry());
    }
    if (from.has_max_number_of_conflicts_in_random_solution_generation()) {
      set_max_number_of_conflicts_in_random_solution_generation(from.max_number_of_conflicts_in_random_solution_generation());
    }
    if (from.has_max_number_of_explored_assignments_per_try_in_ls()) {
      set_max_number_of_explored_assignments_per_try_in_ls(from.max_number_of_explored_assignments_per_try_in_ls());
    }
    if (from.has_use_transposition_table_in_ls()) {
      set_use_transposition_table_in_ls(from.use_transposition_table_in_ls());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_use_learned_binary_clauses_in_lp()) {
      set_use_learned_binary_clauses_in_lp(from.use_learned_binary_clauses_in_lp());
    }
    if (from.has_number_of_solvers()) {
      set_number_of_solvers(from.number_of_solvers());
    }
    if (from.has_synchronization_type()) {
      set_synchronization_type(from.synchronization_type());
    }
    if (from.has_default_solver_optimizer_sets()) {
      set_default_solver_optimizer_sets(from.default_solver_optimizer_sets());
    }
    if (from.has_use_lp_strong_branching()) {
      set_use_lp_strong_branching(from.use_lp_strong_branching());
    }
    if (from.has_decomposer_num_variables_threshold()) {
      set_decomposer_num_variables_threshold(from.decomposer_num_variables_threshold());
    }
    if (from.has_num_bop_solvers_used_by_decomposition()) {
      set_num_bop_solvers_used_by_decomposition(from.num_bop_solvers_used_by_decomposition());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_decomposed_problem_min_time_in_seconds()) {
      set_decomposed_problem_min_time_in_seconds(from.decomposed_problem_min_time_in_seconds());
    }
    if (from.has_guided_sat_conflicts_chunk()) {
      set_guided_sat_conflicts_chunk(from.guided_sat_conflicts_chunk());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BopParameters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BopParameters::CopyFrom(const BopParameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BopParameters::IsInitialized() const {

  return true;
}

void BopParameters::Swap(BopParameters* other) {
  if (other != this) {
    std::swap(max_time_in_seconds_, other->max_time_in_seconds_);
    std::swap(max_deterministic_time_, other->max_deterministic_time_);
    std::swap(lp_max_deterministic_time_, other->lp_max_deterministic_time_);
    std::swap(max_number_of_consecutive_failing_optimizer_calls_, other->max_number_of_consecutive_failing_optimizer_calls_);
    std::swap(relative_gap_limit_, other->relative_gap_limit_);
    std::swap(max_num_decisions_in_ls_, other->max_num_decisions_in_ls_);
    std::swap(max_num_broken_constraints_in_ls_, other->max_num_broken_constraints_in_ls_);
    std::swap(log_search_progress_, other->log_search_progress_);
    std::swap(compute_estimated_impact_, other->compute_estimated_impact_);
    std::swap(prune_search_tree_, other->prune_search_tree_);
    std::swap(sort_constraints_by_num_terms_, other->sort_constraints_by_num_terms_);
    std::swap(use_random_lns_, other->use_random_lns_);
    std::swap(random_seed_, other->random_seed_);
    std::swap(num_relaxed_vars_, other->num_relaxed_vars_);
    std::swap(max_number_of_conflicts_in_random_lns_, other->max_number_of_conflicts_in_random_lns_);
    std::swap(num_random_lns_tries_, other->num_random_lns_tries_);
    std::swap(max_number_of_backtracks_in_ls_, other->max_number_of_backtracks_in_ls_);
    std::swap(use_lp_lns_, other->use_lp_lns_);
    std::swap(use_sat_to_choose_lns_neighbourhood_, other->use_sat_to_choose_lns_neighbourhood_);
    std::swap(max_number_of_conflicts_for_quick_check_, other->max_number_of_conflicts_for_quick_check_);
    std::swap(use_symmetry_, other->use_symmetry_);
    std::swap(max_number_of_conflicts_in_random_solution_generation_, other->max_number_of_conflicts_in_random_solution_generation_);
    std::swap(max_number_of_explored_assignments_per_try_in_ls_, other->max_number_of_explored_assignments_per_try_in_ls_);
    std::swap(use_transposition_table_in_ls_, other->use_transposition_table_in_ls_);
    std::swap(use_learned_binary_clauses_in_lp_, other->use_learned_binary_clauses_in_lp_);
    std::swap(number_of_solvers_, other->number_of_solvers_);
    std::swap(synchronization_type_, other->synchronization_type_);
    solver_optimizer_sets_.Swap(&other->solver_optimizer_sets_);
    std::swap(default_solver_optimizer_sets_, other->default_solver_optimizer_sets_);
    std::swap(use_lp_strong_branching_, other->use_lp_strong_branching_);
    std::swap(decomposer_num_variables_threshold_, other->decomposer_num_variables_threshold_);
    std::swap(num_bop_solvers_used_by_decomposition_, other->num_bop_solvers_used_by_decomposition_);
    std::swap(decomposed_problem_min_time_in_seconds_, other->decomposed_problem_min_time_in_seconds_);
    std::swap(guided_sat_conflicts_chunk_, other->guided_sat_conflicts_chunk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BopParameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BopParameters_descriptor_;
  metadata.reflection = BopParameters_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace bop
}  // namespace operations_research

// @@protoc_insertion_point(global_scope)
