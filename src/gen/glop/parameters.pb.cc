// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: glop/parameters.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "glop/parameters.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace operations_research {
namespace glop {

namespace {

const ::google::protobuf::Descriptor* GlopParameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlopParameters_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GlopParameters_SolverBehavior_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GlopParameters_PricingRule_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GlopParameters_InitialBasisHeuristic_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_glop_2fparameters_2eproto() {
  protobuf_AddDesc_glop_2fparameters_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "glop/parameters.proto");
  GOOGLE_CHECK(file != NULL);
  GlopParameters_descriptor_ = file->message_type(0);
  static const int GlopParameters_offsets_[41] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, feasibility_rule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, optimization_rule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, normalize_using_column_norm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, use_nested_pricing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, refactorization_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, recompute_reduced_costs_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, recompute_edges_norm_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, primal_feasibility_tolerance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, dual_feasibility_tolerance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, ratio_test_zero_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, harris_tolerance_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, small_pivot_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, minimum_acceptable_pivot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, use_scaling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, initial_basis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, use_transposed_matrix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, basis_refactorization_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, solve_dual_problem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, dualizer_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, solution_feasibility_tolerance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, provide_strong_optimal_guarantee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, lu_factorization_pivot_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, max_time_in_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, max_deterministic_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, max_number_of_iterations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, markowitz_zlatev_parameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, markowitz_singularity_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, use_dual_simplex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, allow_simplex_algorithm_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, devex_weights_reset_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, use_preprocessing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, use_middle_product_form_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, initialize_devex_with_column_norms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, exploit_singleton_column_in_initial_basis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, dual_small_pivot_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, preprocessor_zero_tolerance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, objective_lower_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, objective_upper_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, degenerate_ministep_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, random_seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, num_omp_threads_),
  };
  GlopParameters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlopParameters_descriptor_,
      GlopParameters::default_instance_,
      GlopParameters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlopParameters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlopParameters));
  GlopParameters_SolverBehavior_descriptor_ = GlopParameters_descriptor_->enum_type(0);
  GlopParameters_PricingRule_descriptor_ = GlopParameters_descriptor_->enum_type(1);
  GlopParameters_InitialBasisHeuristic_descriptor_ = GlopParameters_descriptor_->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_glop_2fparameters_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlopParameters_descriptor_, &GlopParameters::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_glop_2fparameters_2eproto() {
  delete GlopParameters::default_instance_;
  delete GlopParameters_reflection_;
}

void protobuf_AddDesc_glop_2fparameters_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025glop/parameters.proto\022\030operations_rese"
    "arch.glop\"\276\020\n\016GlopParameters\022]\n\020feasibil"
    "ity_rule\030\001 \001(\01624.operations_research.glo"
    "p.GlopParameters.PricingRule:\rSTEEPEST_E"
    "DGE\022^\n\021optimization_rule\030\002 \001(\01624.operati"
    "ons_research.glop.GlopParameters.Pricing"
    "Rule:\rSTEEPEST_EDGE\022)\n\033normalize_using_c"
    "olumn_norm\030\004 \001(\010:\004true\022 \n\022use_nested_pri"
    "cing\030\005 \001(\010:\004true\022)\n\031refactorization_thre"
    "shold\030\006 \001(\001:\0061e-008\0221\n!recompute_reduced"
    "_costs_threshold\030\010 \001(\001:\0061e-008\022+\n\036recomp"
    "ute_edges_norm_threshold\030\t \001(\001:\003100\022,\n\034p"
    "rimal_feasibility_tolerance\030\n \001(\001:\0061e-00"
    "8\022*\n\032dual_feasibility_tolerance\030\013 \001(\001:\0061"
    "e-010\022)\n\031ratio_test_zero_threshold\030\014 \001(\001"
    ":\0061e-009\022#\n\026harris_tolerance_ratio\030\r \001(\001"
    ":\0030.5\022%\n\025small_pivot_threshold\030\016 \001(\001:\0061e"
    "-006\022(\n\030minimum_acceptable_pivot\030\017 \001(\001:\006"
    "1e-006\022\031\n\013use_scaling\030\020 \001(\010:\004true\022a\n\rini"
    "tial_basis\030\021 \001(\0162>.operations_research.g"
    "lop.GlopParameters.InitialBasisHeuristic"
    ":\nTRIANGULAR\022#\n\025use_transposed_matrix\030\022 "
    "\001(\010:\004true\022(\n\034basis_refactorization_perio"
    "d\030\023 \001(\005:\00264\022f\n\022solve_dual_problem\030\024 \001(\0162"
    "7.operations_research.glop.GlopParameter"
    "s.SolverBehavior:\021LET_SOLVER_DECIDE\022\037\n\022d"
    "ualizer_threshold\030\025 \001(\001:\0031.5\022.\n\036solution"
    "_feasibility_tolerance\030\026 \001(\001:\0061e-006\022.\n "
    "provide_strong_optimal_guarantee\030\030 \001(\010:\004"
    "true\022.\n lu_factorization_pivot_threshold"
    "\030\031 \001(\001:\0040.01\022 \n\023max_time_in_seconds\030\032 \001("
    "\001:\003inf\022#\n\026max_deterministic_time\030- \001(\001:\003"
    "inf\022$\n\030max_number_of_iterations\030\033 \001(\003:\002-"
    "1\022%\n\032markowitz_zlatev_parameter\030\035 \001(\005:\0013"
    "\022/\n\037markowitz_singularity_threshold\030\036 \001("
    "\001:\0061e-015\022\037\n\020use_dual_simplex\030\037 \001(\010:\005fal"
    "se\022-\n\036allow_simplex_algorithm_change\030  \001"
    "(\010:\005false\022\'\n\032devex_weights_reset_period\030"
    "! \001(\005:\003150\022\037\n\021use_preprocessing\030\" \001(\010:\004t"
    "rue\022,\n\036use_middle_product_form_update\030# "
    "\001(\010:\004true\0220\n\"initialize_devex_with_colum"
    "n_norms\030$ \001(\010:\004true\0227\n)exploit_singleton"
    "_column_in_initial_basis\030% \001(\010:\004true\022*\n\032"
    "dual_small_pivot_threshold\030& \001(\001:\0060.0001"
    "\022+\n\033preprocessor_zero_tolerance\030\' \001(\001:\0061"
    "e-009\022#\n\025objective_lower_limit\030( \001(\001:\004-i"
    "nf\022\"\n\025objective_upper_limit\030) \001(\001:\003inf\022("
    "\n\032degenerate_ministep_factor\030* \001(\001:\0040.01"
    "\022\026\n\013random_seed\030+ \001(\005:\0011\022\032\n\017num_omp_thre"
    "ads\030, \001(\005:\0011\"D\n\016SolverBehavior\022\r\n\tALWAYS"
    "_DO\020\000\022\014\n\010NEVER_DO\020\001\022\025\n\021LET_SOLVER_DECIDE"
    "\020\002\"8\n\013PricingRule\022\013\n\007DANTZIG\020\000\022\021\n\rSTEEPE"
    "ST_EDGE\020\001\022\t\n\005DEVEX\020\002\"<\n\025InitialBasisHeur"
    "istic\022\010\n\004NONE\020\000\022\t\n\005BIXBY\020\001\022\016\n\nTRIANGULAR"
    "\020\002", 2162);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "glop/parameters.proto", &protobuf_RegisterTypes);
  GlopParameters::default_instance_ = new GlopParameters();
  GlopParameters::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_glop_2fparameters_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_glop_2fparameters_2eproto {
  StaticDescriptorInitializer_glop_2fparameters_2eproto() {
    protobuf_AddDesc_glop_2fparameters_2eproto();
  }
} static_descriptor_initializer_glop_2fparameters_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* GlopParameters_SolverBehavior_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlopParameters_SolverBehavior_descriptor_;
}
bool GlopParameters_SolverBehavior_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GlopParameters_SolverBehavior GlopParameters::ALWAYS_DO;
const GlopParameters_SolverBehavior GlopParameters::NEVER_DO;
const GlopParameters_SolverBehavior GlopParameters::LET_SOLVER_DECIDE;
const GlopParameters_SolverBehavior GlopParameters::SolverBehavior_MIN;
const GlopParameters_SolverBehavior GlopParameters::SolverBehavior_MAX;
const int GlopParameters::SolverBehavior_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* GlopParameters_PricingRule_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlopParameters_PricingRule_descriptor_;
}
bool GlopParameters_PricingRule_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GlopParameters_PricingRule GlopParameters::DANTZIG;
const GlopParameters_PricingRule GlopParameters::STEEPEST_EDGE;
const GlopParameters_PricingRule GlopParameters::DEVEX;
const GlopParameters_PricingRule GlopParameters::PricingRule_MIN;
const GlopParameters_PricingRule GlopParameters::PricingRule_MAX;
const int GlopParameters::PricingRule_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* GlopParameters_InitialBasisHeuristic_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlopParameters_InitialBasisHeuristic_descriptor_;
}
bool GlopParameters_InitialBasisHeuristic_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GlopParameters_InitialBasisHeuristic GlopParameters::NONE;
const GlopParameters_InitialBasisHeuristic GlopParameters::BIXBY;
const GlopParameters_InitialBasisHeuristic GlopParameters::TRIANGULAR;
const GlopParameters_InitialBasisHeuristic GlopParameters::InitialBasisHeuristic_MIN;
const GlopParameters_InitialBasisHeuristic GlopParameters::InitialBasisHeuristic_MAX;
const int GlopParameters::InitialBasisHeuristic_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GlopParameters::kFeasibilityRuleFieldNumber;
const int GlopParameters::kOptimizationRuleFieldNumber;
const int GlopParameters::kNormalizeUsingColumnNormFieldNumber;
const int GlopParameters::kUseNestedPricingFieldNumber;
const int GlopParameters::kRefactorizationThresholdFieldNumber;
const int GlopParameters::kRecomputeReducedCostsThresholdFieldNumber;
const int GlopParameters::kRecomputeEdgesNormThresholdFieldNumber;
const int GlopParameters::kPrimalFeasibilityToleranceFieldNumber;
const int GlopParameters::kDualFeasibilityToleranceFieldNumber;
const int GlopParameters::kRatioTestZeroThresholdFieldNumber;
const int GlopParameters::kHarrisToleranceRatioFieldNumber;
const int GlopParameters::kSmallPivotThresholdFieldNumber;
const int GlopParameters::kMinimumAcceptablePivotFieldNumber;
const int GlopParameters::kUseScalingFieldNumber;
const int GlopParameters::kInitialBasisFieldNumber;
const int GlopParameters::kUseTransposedMatrixFieldNumber;
const int GlopParameters::kBasisRefactorizationPeriodFieldNumber;
const int GlopParameters::kSolveDualProblemFieldNumber;
const int GlopParameters::kDualizerThresholdFieldNumber;
const int GlopParameters::kSolutionFeasibilityToleranceFieldNumber;
const int GlopParameters::kProvideStrongOptimalGuaranteeFieldNumber;
const int GlopParameters::kLuFactorizationPivotThresholdFieldNumber;
const int GlopParameters::kMaxTimeInSecondsFieldNumber;
const int GlopParameters::kMaxDeterministicTimeFieldNumber;
const int GlopParameters::kMaxNumberOfIterationsFieldNumber;
const int GlopParameters::kMarkowitzZlatevParameterFieldNumber;
const int GlopParameters::kMarkowitzSingularityThresholdFieldNumber;
const int GlopParameters::kUseDualSimplexFieldNumber;
const int GlopParameters::kAllowSimplexAlgorithmChangeFieldNumber;
const int GlopParameters::kDevexWeightsResetPeriodFieldNumber;
const int GlopParameters::kUsePreprocessingFieldNumber;
const int GlopParameters::kUseMiddleProductFormUpdateFieldNumber;
const int GlopParameters::kInitializeDevexWithColumnNormsFieldNumber;
const int GlopParameters::kExploitSingletonColumnInInitialBasisFieldNumber;
const int GlopParameters::kDualSmallPivotThresholdFieldNumber;
const int GlopParameters::kPreprocessorZeroToleranceFieldNumber;
const int GlopParameters::kObjectiveLowerLimitFieldNumber;
const int GlopParameters::kObjectiveUpperLimitFieldNumber;
const int GlopParameters::kDegenerateMinistepFactorFieldNumber;
const int GlopParameters::kRandomSeedFieldNumber;
const int GlopParameters::kNumOmpThreadsFieldNumber;
#endif  // !_MSC_VER

GlopParameters::GlopParameters()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.glop.GlopParameters)
}

void GlopParameters::InitAsDefaultInstance() {
}

GlopParameters::GlopParameters(const GlopParameters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.glop.GlopParameters)
}

void GlopParameters::SharedCtor() {
  _cached_size_ = 0;
  feasibility_rule_ = 1;
  optimization_rule_ = 1;
  normalize_using_column_norm_ = true;
  use_nested_pricing_ = true;
  refactorization_threshold_ = 1e-008;
  recompute_reduced_costs_threshold_ = 1e-008;
  recompute_edges_norm_threshold_ = 100;
  primal_feasibility_tolerance_ = 1e-008;
  dual_feasibility_tolerance_ = 1e-010;
  ratio_test_zero_threshold_ = 1e-009;
  harris_tolerance_ratio_ = 0.5;
  small_pivot_threshold_ = 1e-006;
  minimum_acceptable_pivot_ = 1e-006;
  use_scaling_ = true;
  initial_basis_ = 2;
  use_transposed_matrix_ = true;
  basis_refactorization_period_ = 64;
  solve_dual_problem_ = 2;
  dualizer_threshold_ = 1.5;
  solution_feasibility_tolerance_ = 1e-006;
  provide_strong_optimal_guarantee_ = true;
  lu_factorization_pivot_threshold_ = 0.01;
  max_time_in_seconds_ = ::google::protobuf::internal::Infinity();
  max_deterministic_time_ = ::google::protobuf::internal::Infinity();
  max_number_of_iterations_ = GOOGLE_LONGLONG(-1);
  markowitz_zlatev_parameter_ = 3;
  markowitz_singularity_threshold_ = 1e-015;
  use_dual_simplex_ = false;
  allow_simplex_algorithm_change_ = false;
  devex_weights_reset_period_ = 150;
  use_preprocessing_ = true;
  use_middle_product_form_update_ = true;
  initialize_devex_with_column_norms_ = true;
  exploit_singleton_column_in_initial_basis_ = true;
  dual_small_pivot_threshold_ = 0.0001;
  preprocessor_zero_tolerance_ = 1e-009;
  objective_lower_limit_ = -::google::protobuf::internal::Infinity();
  objective_upper_limit_ = ::google::protobuf::internal::Infinity();
  degenerate_ministep_factor_ = 0.01;
  random_seed_ = 1;
  num_omp_threads_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlopParameters::~GlopParameters() {
  // @@protoc_insertion_point(destructor:operations_research.glop.GlopParameters)
  SharedDtor();
}

void GlopParameters::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GlopParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlopParameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlopParameters_descriptor_;
}

const GlopParameters& GlopParameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_glop_2fparameters_2eproto();
  return *default_instance_;
}

GlopParameters* GlopParameters::default_instance_ = NULL;

GlopParameters* GlopParameters::New() const {
  return new GlopParameters;
}

void GlopParameters::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GlopParameters*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    feasibility_rule_ = 1;
    optimization_rule_ = 1;
    normalize_using_column_norm_ = true;
    use_nested_pricing_ = true;
    refactorization_threshold_ = 1e-008;
    recompute_reduced_costs_threshold_ = 1e-008;
    recompute_edges_norm_threshold_ = 100;
    primal_feasibility_tolerance_ = 1e-008;
  }
  if (_has_bits_[8 / 32] & 65280) {
    dual_feasibility_tolerance_ = 1e-010;
    ratio_test_zero_threshold_ = 1e-009;
    harris_tolerance_ratio_ = 0.5;
    small_pivot_threshold_ = 1e-006;
    minimum_acceptable_pivot_ = 1e-006;
    use_scaling_ = true;
    initial_basis_ = 2;
    use_transposed_matrix_ = true;
  }
  if (_has_bits_[16 / 32] & 16711680) {
    basis_refactorization_period_ = 64;
    solve_dual_problem_ = 2;
    dualizer_threshold_ = 1.5;
    solution_feasibility_tolerance_ = 1e-006;
    provide_strong_optimal_guarantee_ = true;
    lu_factorization_pivot_threshold_ = 0.01;
    max_time_in_seconds_ = ::google::protobuf::internal::Infinity();
    max_deterministic_time_ = ::google::protobuf::internal::Infinity();
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(use_dual_simplex_, allow_simplex_algorithm_change_);
    max_number_of_iterations_ = GOOGLE_LONGLONG(-1);
    markowitz_zlatev_parameter_ = 3;
    markowitz_singularity_threshold_ = 1e-015;
    devex_weights_reset_period_ = 150;
    use_preprocessing_ = true;
    use_middle_product_form_update_ = true;
  }
  if (_has_bits_[32 / 32] & 255) {
    initialize_devex_with_column_norms_ = true;
    exploit_singleton_column_in_initial_basis_ = true;
    dual_small_pivot_threshold_ = 0.0001;
    preprocessor_zero_tolerance_ = 1e-009;
    objective_lower_limit_ = -::google::protobuf::internal::Infinity();
    objective_upper_limit_ = ::google::protobuf::internal::Infinity();
    degenerate_ministep_factor_ = 0.01;
    random_seed_ = 1;
  }
  num_omp_threads_ = 1;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlopParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.glop.GlopParameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .operations_research.glop.GlopParameters.PricingRule feasibility_rule = 1 [default = STEEPEST_EDGE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::operations_research::glop::GlopParameters_PricingRule_IsValid(value)) {
            set_feasibility_rule(static_cast< ::operations_research::glop::GlopParameters_PricingRule >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_optimization_rule;
        break;
      }

      // optional .operations_research.glop.GlopParameters.PricingRule optimization_rule = 2 [default = STEEPEST_EDGE];
      case 2: {
        if (tag == 16) {
         parse_optimization_rule:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::operations_research::glop::GlopParameters_PricingRule_IsValid(value)) {
            set_optimization_rule(static_cast< ::operations_research::glop::GlopParameters_PricingRule >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_normalize_using_column_norm;
        break;
      }

      // optional bool normalize_using_column_norm = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_normalize_using_column_norm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_using_column_norm_)));
          set_has_normalize_using_column_norm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_use_nested_pricing;
        break;
      }

      // optional bool use_nested_pricing = 5 [default = true];
      case 5: {
        if (tag == 40) {
         parse_use_nested_pricing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_nested_pricing_)));
          set_has_use_nested_pricing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_refactorization_threshold;
        break;
      }

      // optional double refactorization_threshold = 6 [default = 1e-008];
      case 6: {
        if (tag == 49) {
         parse_refactorization_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &refactorization_threshold_)));
          set_has_refactorization_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_recompute_reduced_costs_threshold;
        break;
      }

      // optional double recompute_reduced_costs_threshold = 8 [default = 1e-008];
      case 8: {
        if (tag == 65) {
         parse_recompute_reduced_costs_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &recompute_reduced_costs_threshold_)));
          set_has_recompute_reduced_costs_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_recompute_edges_norm_threshold;
        break;
      }

      // optional double recompute_edges_norm_threshold = 9 [default = 100];
      case 9: {
        if (tag == 73) {
         parse_recompute_edges_norm_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &recompute_edges_norm_threshold_)));
          set_has_recompute_edges_norm_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_primal_feasibility_tolerance;
        break;
      }

      // optional double primal_feasibility_tolerance = 10 [default = 1e-008];
      case 10: {
        if (tag == 81) {
         parse_primal_feasibility_tolerance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &primal_feasibility_tolerance_)));
          set_has_primal_feasibility_tolerance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_dual_feasibility_tolerance;
        break;
      }

      // optional double dual_feasibility_tolerance = 11 [default = 1e-010];
      case 11: {
        if (tag == 89) {
         parse_dual_feasibility_tolerance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dual_feasibility_tolerance_)));
          set_has_dual_feasibility_tolerance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_ratio_test_zero_threshold;
        break;
      }

      // optional double ratio_test_zero_threshold = 12 [default = 1e-009];
      case 12: {
        if (tag == 97) {
         parse_ratio_test_zero_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ratio_test_zero_threshold_)));
          set_has_ratio_test_zero_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_harris_tolerance_ratio;
        break;
      }

      // optional double harris_tolerance_ratio = 13 [default = 0.5];
      case 13: {
        if (tag == 105) {
         parse_harris_tolerance_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &harris_tolerance_ratio_)));
          set_has_harris_tolerance_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_small_pivot_threshold;
        break;
      }

      // optional double small_pivot_threshold = 14 [default = 1e-006];
      case 14: {
        if (tag == 113) {
         parse_small_pivot_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &small_pivot_threshold_)));
          set_has_small_pivot_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_minimum_acceptable_pivot;
        break;
      }

      // optional double minimum_acceptable_pivot = 15 [default = 1e-006];
      case 15: {
        if (tag == 121) {
         parse_minimum_acceptable_pivot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minimum_acceptable_pivot_)));
          set_has_minimum_acceptable_pivot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_use_scaling;
        break;
      }

      // optional bool use_scaling = 16 [default = true];
      case 16: {
        if (tag == 128) {
         parse_use_scaling:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_scaling_)));
          set_has_use_scaling();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_initial_basis;
        break;
      }

      // optional .operations_research.glop.GlopParameters.InitialBasisHeuristic initial_basis = 17 [default = TRIANGULAR];
      case 17: {
        if (tag == 136) {
         parse_initial_basis:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::operations_research::glop::GlopParameters_InitialBasisHeuristic_IsValid(value)) {
            set_initial_basis(static_cast< ::operations_research::glop::GlopParameters_InitialBasisHeuristic >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_use_transposed_matrix;
        break;
      }

      // optional bool use_transposed_matrix = 18 [default = true];
      case 18: {
        if (tag == 144) {
         parse_use_transposed_matrix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_transposed_matrix_)));
          set_has_use_transposed_matrix();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_basis_refactorization_period;
        break;
      }

      // optional int32 basis_refactorization_period = 19 [default = 64];
      case 19: {
        if (tag == 152) {
         parse_basis_refactorization_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basis_refactorization_period_)));
          set_has_basis_refactorization_period();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_solve_dual_problem;
        break;
      }

      // optional .operations_research.glop.GlopParameters.SolverBehavior solve_dual_problem = 20 [default = LET_SOLVER_DECIDE];
      case 20: {
        if (tag == 160) {
         parse_solve_dual_problem:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::operations_research::glop::GlopParameters_SolverBehavior_IsValid(value)) {
            set_solve_dual_problem(static_cast< ::operations_research::glop::GlopParameters_SolverBehavior >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_dualizer_threshold;
        break;
      }

      // optional double dualizer_threshold = 21 [default = 1.5];
      case 21: {
        if (tag == 169) {
         parse_dualizer_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dualizer_threshold_)));
          set_has_dualizer_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_solution_feasibility_tolerance;
        break;
      }

      // optional double solution_feasibility_tolerance = 22 [default = 1e-006];
      case 22: {
        if (tag == 177) {
         parse_solution_feasibility_tolerance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &solution_feasibility_tolerance_)));
          set_has_solution_feasibility_tolerance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_provide_strong_optimal_guarantee;
        break;
      }

      // optional bool provide_strong_optimal_guarantee = 24 [default = true];
      case 24: {
        if (tag == 192) {
         parse_provide_strong_optimal_guarantee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &provide_strong_optimal_guarantee_)));
          set_has_provide_strong_optimal_guarantee();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(201)) goto parse_lu_factorization_pivot_threshold;
        break;
      }

      // optional double lu_factorization_pivot_threshold = 25 [default = 0.01];
      case 25: {
        if (tag == 201) {
         parse_lu_factorization_pivot_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lu_factorization_pivot_threshold_)));
          set_has_lu_factorization_pivot_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(209)) goto parse_max_time_in_seconds;
        break;
      }

      // optional double max_time_in_seconds = 26 [default = inf];
      case 26: {
        if (tag == 209) {
         parse_max_time_in_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_time_in_seconds_)));
          set_has_max_time_in_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_max_number_of_iterations;
        break;
      }

      // optional int64 max_number_of_iterations = 27 [default = -1];
      case 27: {
        if (tag == 216) {
         parse_max_number_of_iterations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_number_of_iterations_)));
          set_has_max_number_of_iterations();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_markowitz_zlatev_parameter;
        break;
      }

      // optional int32 markowitz_zlatev_parameter = 29 [default = 3];
      case 29: {
        if (tag == 232) {
         parse_markowitz_zlatev_parameter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &markowitz_zlatev_parameter_)));
          set_has_markowitz_zlatev_parameter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_markowitz_singularity_threshold;
        break;
      }

      // optional double markowitz_singularity_threshold = 30 [default = 1e-015];
      case 30: {
        if (tag == 241) {
         parse_markowitz_singularity_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &markowitz_singularity_threshold_)));
          set_has_markowitz_singularity_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_use_dual_simplex;
        break;
      }

      // optional bool use_dual_simplex = 31 [default = false];
      case 31: {
        if (tag == 248) {
         parse_use_dual_simplex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_dual_simplex_)));
          set_has_use_dual_simplex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_allow_simplex_algorithm_change;
        break;
      }

      // optional bool allow_simplex_algorithm_change = 32 [default = false];
      case 32: {
        if (tag == 256) {
         parse_allow_simplex_algorithm_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_simplex_algorithm_change_)));
          set_has_allow_simplex_algorithm_change();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_devex_weights_reset_period;
        break;
      }

      // optional int32 devex_weights_reset_period = 33 [default = 150];
      case 33: {
        if (tag == 264) {
         parse_devex_weights_reset_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devex_weights_reset_period_)));
          set_has_devex_weights_reset_period();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_use_preprocessing;
        break;
      }

      // optional bool use_preprocessing = 34 [default = true];
      case 34: {
        if (tag == 272) {
         parse_use_preprocessing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_preprocessing_)));
          set_has_use_preprocessing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_use_middle_product_form_update;
        break;
      }

      // optional bool use_middle_product_form_update = 35 [default = true];
      case 35: {
        if (tag == 280) {
         parse_use_middle_product_form_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_middle_product_form_update_)));
          set_has_use_middle_product_form_update();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_initialize_devex_with_column_norms;
        break;
      }

      // optional bool initialize_devex_with_column_norms = 36 [default = true];
      case 36: {
        if (tag == 288) {
         parse_initialize_devex_with_column_norms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &initialize_devex_with_column_norms_)));
          set_has_initialize_devex_with_column_norms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_exploit_singleton_column_in_initial_basis;
        break;
      }

      // optional bool exploit_singleton_column_in_initial_basis = 37 [default = true];
      case 37: {
        if (tag == 296) {
         parse_exploit_singleton_column_in_initial_basis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exploit_singleton_column_in_initial_basis_)));
          set_has_exploit_singleton_column_in_initial_basis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(305)) goto parse_dual_small_pivot_threshold;
        break;
      }

      // optional double dual_small_pivot_threshold = 38 [default = 0.0001];
      case 38: {
        if (tag == 305) {
         parse_dual_small_pivot_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dual_small_pivot_threshold_)));
          set_has_dual_small_pivot_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(313)) goto parse_preprocessor_zero_tolerance;
        break;
      }

      // optional double preprocessor_zero_tolerance = 39 [default = 1e-009];
      case 39: {
        if (tag == 313) {
         parse_preprocessor_zero_tolerance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preprocessor_zero_tolerance_)));
          set_has_preprocessor_zero_tolerance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(321)) goto parse_objective_lower_limit;
        break;
      }

      // optional double objective_lower_limit = 40 [default = -inf];
      case 40: {
        if (tag == 321) {
         parse_objective_lower_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &objective_lower_limit_)));
          set_has_objective_lower_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(329)) goto parse_objective_upper_limit;
        break;
      }

      // optional double objective_upper_limit = 41 [default = inf];
      case 41: {
        if (tag == 329) {
         parse_objective_upper_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &objective_upper_limit_)));
          set_has_objective_upper_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(337)) goto parse_degenerate_ministep_factor;
        break;
      }

      // optional double degenerate_ministep_factor = 42 [default = 0.01];
      case 42: {
        if (tag == 337) {
         parse_degenerate_ministep_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &degenerate_ministep_factor_)));
          set_has_degenerate_ministep_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_random_seed;
        break;
      }

      // optional int32 random_seed = 43 [default = 1];
      case 43: {
        if (tag == 344) {
         parse_random_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &random_seed_)));
          set_has_random_seed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_num_omp_threads;
        break;
      }

      // optional int32 num_omp_threads = 44 [default = 1];
      case 44: {
        if (tag == 352) {
         parse_num_omp_threads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_omp_threads_)));
          set_has_num_omp_threads();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(361)) goto parse_max_deterministic_time;
        break;
      }

      // optional double max_deterministic_time = 45 [default = inf];
      case 45: {
        if (tag == 361) {
         parse_max_deterministic_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_deterministic_time_)));
          set_has_max_deterministic_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.glop.GlopParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.glop.GlopParameters)
  return false;
#undef DO_
}

void GlopParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.glop.GlopParameters)
  // optional .operations_research.glop.GlopParameters.PricingRule feasibility_rule = 1 [default = STEEPEST_EDGE];
  if (has_feasibility_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->feasibility_rule(), output);
  }

  // optional .operations_research.glop.GlopParameters.PricingRule optimization_rule = 2 [default = STEEPEST_EDGE];
  if (has_optimization_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->optimization_rule(), output);
  }

  // optional bool normalize_using_column_norm = 4 [default = true];
  if (has_normalize_using_column_norm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->normalize_using_column_norm(), output);
  }

  // optional bool use_nested_pricing = 5 [default = true];
  if (has_use_nested_pricing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_nested_pricing(), output);
  }

  // optional double refactorization_threshold = 6 [default = 1e-008];
  if (has_refactorization_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->refactorization_threshold(), output);
  }

  // optional double recompute_reduced_costs_threshold = 8 [default = 1e-008];
  if (has_recompute_reduced_costs_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->recompute_reduced_costs_threshold(), output);
  }

  // optional double recompute_edges_norm_threshold = 9 [default = 100];
  if (has_recompute_edges_norm_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->recompute_edges_norm_threshold(), output);
  }

  // optional double primal_feasibility_tolerance = 10 [default = 1e-008];
  if (has_primal_feasibility_tolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->primal_feasibility_tolerance(), output);
  }

  // optional double dual_feasibility_tolerance = 11 [default = 1e-010];
  if (has_dual_feasibility_tolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->dual_feasibility_tolerance(), output);
  }

  // optional double ratio_test_zero_threshold = 12 [default = 1e-009];
  if (has_ratio_test_zero_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->ratio_test_zero_threshold(), output);
  }

  // optional double harris_tolerance_ratio = 13 [default = 0.5];
  if (has_harris_tolerance_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->harris_tolerance_ratio(), output);
  }

  // optional double small_pivot_threshold = 14 [default = 1e-006];
  if (has_small_pivot_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->small_pivot_threshold(), output);
  }

  // optional double minimum_acceptable_pivot = 15 [default = 1e-006];
  if (has_minimum_acceptable_pivot()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->minimum_acceptable_pivot(), output);
  }

  // optional bool use_scaling = 16 [default = true];
  if (has_use_scaling()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->use_scaling(), output);
  }

  // optional .operations_research.glop.GlopParameters.InitialBasisHeuristic initial_basis = 17 [default = TRIANGULAR];
  if (has_initial_basis()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->initial_basis(), output);
  }

  // optional bool use_transposed_matrix = 18 [default = true];
  if (has_use_transposed_matrix()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->use_transposed_matrix(), output);
  }

  // optional int32 basis_refactorization_period = 19 [default = 64];
  if (has_basis_refactorization_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->basis_refactorization_period(), output);
  }

  // optional .operations_research.glop.GlopParameters.SolverBehavior solve_dual_problem = 20 [default = LET_SOLVER_DECIDE];
  if (has_solve_dual_problem()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->solve_dual_problem(), output);
  }

  // optional double dualizer_threshold = 21 [default = 1.5];
  if (has_dualizer_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->dualizer_threshold(), output);
  }

  // optional double solution_feasibility_tolerance = 22 [default = 1e-006];
  if (has_solution_feasibility_tolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->solution_feasibility_tolerance(), output);
  }

  // optional bool provide_strong_optimal_guarantee = 24 [default = true];
  if (has_provide_strong_optimal_guarantee()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->provide_strong_optimal_guarantee(), output);
  }

  // optional double lu_factorization_pivot_threshold = 25 [default = 0.01];
  if (has_lu_factorization_pivot_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->lu_factorization_pivot_threshold(), output);
  }

  // optional double max_time_in_seconds = 26 [default = inf];
  if (has_max_time_in_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->max_time_in_seconds(), output);
  }

  // optional int64 max_number_of_iterations = 27 [default = -1];
  if (has_max_number_of_iterations()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->max_number_of_iterations(), output);
  }

  // optional int32 markowitz_zlatev_parameter = 29 [default = 3];
  if (has_markowitz_zlatev_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->markowitz_zlatev_parameter(), output);
  }

  // optional double markowitz_singularity_threshold = 30 [default = 1e-015];
  if (has_markowitz_singularity_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->markowitz_singularity_threshold(), output);
  }

  // optional bool use_dual_simplex = 31 [default = false];
  if (has_use_dual_simplex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->use_dual_simplex(), output);
  }

  // optional bool allow_simplex_algorithm_change = 32 [default = false];
  if (has_allow_simplex_algorithm_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->allow_simplex_algorithm_change(), output);
  }

  // optional int32 devex_weights_reset_period = 33 [default = 150];
  if (has_devex_weights_reset_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->devex_weights_reset_period(), output);
  }

  // optional bool use_preprocessing = 34 [default = true];
  if (has_use_preprocessing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->use_preprocessing(), output);
  }

  // optional bool use_middle_product_form_update = 35 [default = true];
  if (has_use_middle_product_form_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->use_middle_product_form_update(), output);
  }

  // optional bool initialize_devex_with_column_norms = 36 [default = true];
  if (has_initialize_devex_with_column_norms()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->initialize_devex_with_column_norms(), output);
  }

  // optional bool exploit_singleton_column_in_initial_basis = 37 [default = true];
  if (has_exploit_singleton_column_in_initial_basis()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->exploit_singleton_column_in_initial_basis(), output);
  }

  // optional double dual_small_pivot_threshold = 38 [default = 0.0001];
  if (has_dual_small_pivot_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(38, this->dual_small_pivot_threshold(), output);
  }

  // optional double preprocessor_zero_tolerance = 39 [default = 1e-009];
  if (has_preprocessor_zero_tolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(39, this->preprocessor_zero_tolerance(), output);
  }

  // optional double objective_lower_limit = 40 [default = -inf];
  if (has_objective_lower_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->objective_lower_limit(), output);
  }

  // optional double objective_upper_limit = 41 [default = inf];
  if (has_objective_upper_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(41, this->objective_upper_limit(), output);
  }

  // optional double degenerate_ministep_factor = 42 [default = 0.01];
  if (has_degenerate_ministep_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(42, this->degenerate_ministep_factor(), output);
  }

  // optional int32 random_seed = 43 [default = 1];
  if (has_random_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->random_seed(), output);
  }

  // optional int32 num_omp_threads = 44 [default = 1];
  if (has_num_omp_threads()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->num_omp_threads(), output);
  }

  // optional double max_deterministic_time = 45 [default = inf];
  if (has_max_deterministic_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(45, this->max_deterministic_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.glop.GlopParameters)
}

::google::protobuf::uint8* GlopParameters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.glop.GlopParameters)
  // optional .operations_research.glop.GlopParameters.PricingRule feasibility_rule = 1 [default = STEEPEST_EDGE];
  if (has_feasibility_rule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->feasibility_rule(), target);
  }

  // optional .operations_research.glop.GlopParameters.PricingRule optimization_rule = 2 [default = STEEPEST_EDGE];
  if (has_optimization_rule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->optimization_rule(), target);
  }

  // optional bool normalize_using_column_norm = 4 [default = true];
  if (has_normalize_using_column_norm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->normalize_using_column_norm(), target);
  }

  // optional bool use_nested_pricing = 5 [default = true];
  if (has_use_nested_pricing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_nested_pricing(), target);
  }

  // optional double refactorization_threshold = 6 [default = 1e-008];
  if (has_refactorization_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->refactorization_threshold(), target);
  }

  // optional double recompute_reduced_costs_threshold = 8 [default = 1e-008];
  if (has_recompute_reduced_costs_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->recompute_reduced_costs_threshold(), target);
  }

  // optional double recompute_edges_norm_threshold = 9 [default = 100];
  if (has_recompute_edges_norm_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->recompute_edges_norm_threshold(), target);
  }

  // optional double primal_feasibility_tolerance = 10 [default = 1e-008];
  if (has_primal_feasibility_tolerance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->primal_feasibility_tolerance(), target);
  }

  // optional double dual_feasibility_tolerance = 11 [default = 1e-010];
  if (has_dual_feasibility_tolerance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->dual_feasibility_tolerance(), target);
  }

  // optional double ratio_test_zero_threshold = 12 [default = 1e-009];
  if (has_ratio_test_zero_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->ratio_test_zero_threshold(), target);
  }

  // optional double harris_tolerance_ratio = 13 [default = 0.5];
  if (has_harris_tolerance_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->harris_tolerance_ratio(), target);
  }

  // optional double small_pivot_threshold = 14 [default = 1e-006];
  if (has_small_pivot_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->small_pivot_threshold(), target);
  }

  // optional double minimum_acceptable_pivot = 15 [default = 1e-006];
  if (has_minimum_acceptable_pivot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->minimum_acceptable_pivot(), target);
  }

  // optional bool use_scaling = 16 [default = true];
  if (has_use_scaling()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->use_scaling(), target);
  }

  // optional .operations_research.glop.GlopParameters.InitialBasisHeuristic initial_basis = 17 [default = TRIANGULAR];
  if (has_initial_basis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->initial_basis(), target);
  }

  // optional bool use_transposed_matrix = 18 [default = true];
  if (has_use_transposed_matrix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->use_transposed_matrix(), target);
  }

  // optional int32 basis_refactorization_period = 19 [default = 64];
  if (has_basis_refactorization_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->basis_refactorization_period(), target);
  }

  // optional .operations_research.glop.GlopParameters.SolverBehavior solve_dual_problem = 20 [default = LET_SOLVER_DECIDE];
  if (has_solve_dual_problem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->solve_dual_problem(), target);
  }

  // optional double dualizer_threshold = 21 [default = 1.5];
  if (has_dualizer_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->dualizer_threshold(), target);
  }

  // optional double solution_feasibility_tolerance = 22 [default = 1e-006];
  if (has_solution_feasibility_tolerance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->solution_feasibility_tolerance(), target);
  }

  // optional bool provide_strong_optimal_guarantee = 24 [default = true];
  if (has_provide_strong_optimal_guarantee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->provide_strong_optimal_guarantee(), target);
  }

  // optional double lu_factorization_pivot_threshold = 25 [default = 0.01];
  if (has_lu_factorization_pivot_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->lu_factorization_pivot_threshold(), target);
  }

  // optional double max_time_in_seconds = 26 [default = inf];
  if (has_max_time_in_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->max_time_in_seconds(), target);
  }

  // optional int64 max_number_of_iterations = 27 [default = -1];
  if (has_max_number_of_iterations()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->max_number_of_iterations(), target);
  }

  // optional int32 markowitz_zlatev_parameter = 29 [default = 3];
  if (has_markowitz_zlatev_parameter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->markowitz_zlatev_parameter(), target);
  }

  // optional double markowitz_singularity_threshold = 30 [default = 1e-015];
  if (has_markowitz_singularity_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->markowitz_singularity_threshold(), target);
  }

  // optional bool use_dual_simplex = 31 [default = false];
  if (has_use_dual_simplex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->use_dual_simplex(), target);
  }

  // optional bool allow_simplex_algorithm_change = 32 [default = false];
  if (has_allow_simplex_algorithm_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->allow_simplex_algorithm_change(), target);
  }

  // optional int32 devex_weights_reset_period = 33 [default = 150];
  if (has_devex_weights_reset_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->devex_weights_reset_period(), target);
  }

  // optional bool use_preprocessing = 34 [default = true];
  if (has_use_preprocessing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->use_preprocessing(), target);
  }

  // optional bool use_middle_product_form_update = 35 [default = true];
  if (has_use_middle_product_form_update()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->use_middle_product_form_update(), target);
  }

  // optional bool initialize_devex_with_column_norms = 36 [default = true];
  if (has_initialize_devex_with_column_norms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->initialize_devex_with_column_norms(), target);
  }

  // optional bool exploit_singleton_column_in_initial_basis = 37 [default = true];
  if (has_exploit_singleton_column_in_initial_basis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->exploit_singleton_column_in_initial_basis(), target);
  }

  // optional double dual_small_pivot_threshold = 38 [default = 0.0001];
  if (has_dual_small_pivot_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(38, this->dual_small_pivot_threshold(), target);
  }

  // optional double preprocessor_zero_tolerance = 39 [default = 1e-009];
  if (has_preprocessor_zero_tolerance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(39, this->preprocessor_zero_tolerance(), target);
  }

  // optional double objective_lower_limit = 40 [default = -inf];
  if (has_objective_lower_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->objective_lower_limit(), target);
  }

  // optional double objective_upper_limit = 41 [default = inf];
  if (has_objective_upper_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(41, this->objective_upper_limit(), target);
  }

  // optional double degenerate_ministep_factor = 42 [default = 0.01];
  if (has_degenerate_ministep_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(42, this->degenerate_ministep_factor(), target);
  }

  // optional int32 random_seed = 43 [default = 1];
  if (has_random_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->random_seed(), target);
  }

  // optional int32 num_omp_threads = 44 [default = 1];
  if (has_num_omp_threads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->num_omp_threads(), target);
  }

  // optional double max_deterministic_time = 45 [default = inf];
  if (has_max_deterministic_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(45, this->max_deterministic_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.glop.GlopParameters)
  return target;
}

int GlopParameters::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .operations_research.glop.GlopParameters.PricingRule feasibility_rule = 1 [default = STEEPEST_EDGE];
    if (has_feasibility_rule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->feasibility_rule());
    }

    // optional .operations_research.glop.GlopParameters.PricingRule optimization_rule = 2 [default = STEEPEST_EDGE];
    if (has_optimization_rule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->optimization_rule());
    }

    // optional bool normalize_using_column_norm = 4 [default = true];
    if (has_normalize_using_column_norm()) {
      total_size += 1 + 1;
    }

    // optional bool use_nested_pricing = 5 [default = true];
    if (has_use_nested_pricing()) {
      total_size += 1 + 1;
    }

    // optional double refactorization_threshold = 6 [default = 1e-008];
    if (has_refactorization_threshold()) {
      total_size += 1 + 8;
    }

    // optional double recompute_reduced_costs_threshold = 8 [default = 1e-008];
    if (has_recompute_reduced_costs_threshold()) {
      total_size += 1 + 8;
    }

    // optional double recompute_edges_norm_threshold = 9 [default = 100];
    if (has_recompute_edges_norm_threshold()) {
      total_size += 1 + 8;
    }

    // optional double primal_feasibility_tolerance = 10 [default = 1e-008];
    if (has_primal_feasibility_tolerance()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double dual_feasibility_tolerance = 11 [default = 1e-010];
    if (has_dual_feasibility_tolerance()) {
      total_size += 1 + 8;
    }

    // optional double ratio_test_zero_threshold = 12 [default = 1e-009];
    if (has_ratio_test_zero_threshold()) {
      total_size += 1 + 8;
    }

    // optional double harris_tolerance_ratio = 13 [default = 0.5];
    if (has_harris_tolerance_ratio()) {
      total_size += 1 + 8;
    }

    // optional double small_pivot_threshold = 14 [default = 1e-006];
    if (has_small_pivot_threshold()) {
      total_size += 1 + 8;
    }

    // optional double minimum_acceptable_pivot = 15 [default = 1e-006];
    if (has_minimum_acceptable_pivot()) {
      total_size += 1 + 8;
    }

    // optional bool use_scaling = 16 [default = true];
    if (has_use_scaling()) {
      total_size += 2 + 1;
    }

    // optional .operations_research.glop.GlopParameters.InitialBasisHeuristic initial_basis = 17 [default = TRIANGULAR];
    if (has_initial_basis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->initial_basis());
    }

    // optional bool use_transposed_matrix = 18 [default = true];
    if (has_use_transposed_matrix()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 basis_refactorization_period = 19 [default = 64];
    if (has_basis_refactorization_period()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basis_refactorization_period());
    }

    // optional .operations_research.glop.GlopParameters.SolverBehavior solve_dual_problem = 20 [default = LET_SOLVER_DECIDE];
    if (has_solve_dual_problem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->solve_dual_problem());
    }

    // optional double dualizer_threshold = 21 [default = 1.5];
    if (has_dualizer_threshold()) {
      total_size += 2 + 8;
    }

    // optional double solution_feasibility_tolerance = 22 [default = 1e-006];
    if (has_solution_feasibility_tolerance()) {
      total_size += 2 + 8;
    }

    // optional bool provide_strong_optimal_guarantee = 24 [default = true];
    if (has_provide_strong_optimal_guarantee()) {
      total_size += 2 + 1;
    }

    // optional double lu_factorization_pivot_threshold = 25 [default = 0.01];
    if (has_lu_factorization_pivot_threshold()) {
      total_size += 2 + 8;
    }

    // optional double max_time_in_seconds = 26 [default = inf];
    if (has_max_time_in_seconds()) {
      total_size += 2 + 8;
    }

    // optional double max_deterministic_time = 45 [default = inf];
    if (has_max_deterministic_time()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int64 max_number_of_iterations = 27 [default = -1];
    if (has_max_number_of_iterations()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_number_of_iterations());
    }

    // optional int32 markowitz_zlatev_parameter = 29 [default = 3];
    if (has_markowitz_zlatev_parameter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->markowitz_zlatev_parameter());
    }

    // optional double markowitz_singularity_threshold = 30 [default = 1e-015];
    if (has_markowitz_singularity_threshold()) {
      total_size += 2 + 8;
    }

    // optional bool use_dual_simplex = 31 [default = false];
    if (has_use_dual_simplex()) {
      total_size += 2 + 1;
    }

    // optional bool allow_simplex_algorithm_change = 32 [default = false];
    if (has_allow_simplex_algorithm_change()) {
      total_size += 2 + 1;
    }

    // optional int32 devex_weights_reset_period = 33 [default = 150];
    if (has_devex_weights_reset_period()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devex_weights_reset_period());
    }

    // optional bool use_preprocessing = 34 [default = true];
    if (has_use_preprocessing()) {
      total_size += 2 + 1;
    }

    // optional bool use_middle_product_form_update = 35 [default = true];
    if (has_use_middle_product_form_update()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bool initialize_devex_with_column_norms = 36 [default = true];
    if (has_initialize_devex_with_column_norms()) {
      total_size += 2 + 1;
    }

    // optional bool exploit_singleton_column_in_initial_basis = 37 [default = true];
    if (has_exploit_singleton_column_in_initial_basis()) {
      total_size += 2 + 1;
    }

    // optional double dual_small_pivot_threshold = 38 [default = 0.0001];
    if (has_dual_small_pivot_threshold()) {
      total_size += 2 + 8;
    }

    // optional double preprocessor_zero_tolerance = 39 [default = 1e-009];
    if (has_preprocessor_zero_tolerance()) {
      total_size += 2 + 8;
    }

    // optional double objective_lower_limit = 40 [default = -inf];
    if (has_objective_lower_limit()) {
      total_size += 2 + 8;
    }

    // optional double objective_upper_limit = 41 [default = inf];
    if (has_objective_upper_limit()) {
      total_size += 2 + 8;
    }

    // optional double degenerate_ministep_factor = 42 [default = 0.01];
    if (has_degenerate_ministep_factor()) {
      total_size += 2 + 8;
    }

    // optional int32 random_seed = 43 [default = 1];
    if (has_random_seed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->random_seed());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 num_omp_threads = 44 [default = 1];
    if (has_num_omp_threads()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_omp_threads());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlopParameters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlopParameters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlopParameters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlopParameters::MergeFrom(const GlopParameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_feasibility_rule()) {
      set_feasibility_rule(from.feasibility_rule());
    }
    if (from.has_optimization_rule()) {
      set_optimization_rule(from.optimization_rule());
    }
    if (from.has_normalize_using_column_norm()) {
      set_normalize_using_column_norm(from.normalize_using_column_norm());
    }
    if (from.has_use_nested_pricing()) {
      set_use_nested_pricing(from.use_nested_pricing());
    }
    if (from.has_refactorization_threshold()) {
      set_refactorization_threshold(from.refactorization_threshold());
    }
    if (from.has_recompute_reduced_costs_threshold()) {
      set_recompute_reduced_costs_threshold(from.recompute_reduced_costs_threshold());
    }
    if (from.has_recompute_edges_norm_threshold()) {
      set_recompute_edges_norm_threshold(from.recompute_edges_norm_threshold());
    }
    if (from.has_primal_feasibility_tolerance()) {
      set_primal_feasibility_tolerance(from.primal_feasibility_tolerance());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dual_feasibility_tolerance()) {
      set_dual_feasibility_tolerance(from.dual_feasibility_tolerance());
    }
    if (from.has_ratio_test_zero_threshold()) {
      set_ratio_test_zero_threshold(from.ratio_test_zero_threshold());
    }
    if (from.has_harris_tolerance_ratio()) {
      set_harris_tolerance_ratio(from.harris_tolerance_ratio());
    }
    if (from.has_small_pivot_threshold()) {
      set_small_pivot_threshold(from.small_pivot_threshold());
    }
    if (from.has_minimum_acceptable_pivot()) {
      set_minimum_acceptable_pivot(from.minimum_acceptable_pivot());
    }
    if (from.has_use_scaling()) {
      set_use_scaling(from.use_scaling());
    }
    if (from.has_initial_basis()) {
      set_initial_basis(from.initial_basis());
    }
    if (from.has_use_transposed_matrix()) {
      set_use_transposed_matrix(from.use_transposed_matrix());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_basis_refactorization_period()) {
      set_basis_refactorization_period(from.basis_refactorization_period());
    }
    if (from.has_solve_dual_problem()) {
      set_solve_dual_problem(from.solve_dual_problem());
    }
    if (from.has_dualizer_threshold()) {
      set_dualizer_threshold(from.dualizer_threshold());
    }
    if (from.has_solution_feasibility_tolerance()) {
      set_solution_feasibility_tolerance(from.solution_feasibility_tolerance());
    }
    if (from.has_provide_strong_optimal_guarantee()) {
      set_provide_strong_optimal_guarantee(from.provide_strong_optimal_guarantee());
    }
    if (from.has_lu_factorization_pivot_threshold()) {
      set_lu_factorization_pivot_threshold(from.lu_factorization_pivot_threshold());
    }
    if (from.has_max_time_in_seconds()) {
      set_max_time_in_seconds(from.max_time_in_seconds());
    }
    if (from.has_max_deterministic_time()) {
      set_max_deterministic_time(from.max_deterministic_time());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_max_number_of_iterations()) {
      set_max_number_of_iterations(from.max_number_of_iterations());
    }
    if (from.has_markowitz_zlatev_parameter()) {
      set_markowitz_zlatev_parameter(from.markowitz_zlatev_parameter());
    }
    if (from.has_markowitz_singularity_threshold()) {
      set_markowitz_singularity_threshold(from.markowitz_singularity_threshold());
    }
    if (from.has_use_dual_simplex()) {
      set_use_dual_simplex(from.use_dual_simplex());
    }
    if (from.has_allow_simplex_algorithm_change()) {
      set_allow_simplex_algorithm_change(from.allow_simplex_algorithm_change());
    }
    if (from.has_devex_weights_reset_period()) {
      set_devex_weights_reset_period(from.devex_weights_reset_period());
    }
    if (from.has_use_preprocessing()) {
      set_use_preprocessing(from.use_preprocessing());
    }
    if (from.has_use_middle_product_form_update()) {
      set_use_middle_product_form_update(from.use_middle_product_form_update());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_initialize_devex_with_column_norms()) {
      set_initialize_devex_with_column_norms(from.initialize_devex_with_column_norms());
    }
    if (from.has_exploit_singleton_column_in_initial_basis()) {
      set_exploit_singleton_column_in_initial_basis(from.exploit_singleton_column_in_initial_basis());
    }
    if (from.has_dual_small_pivot_threshold()) {
      set_dual_small_pivot_threshold(from.dual_small_pivot_threshold());
    }
    if (from.has_preprocessor_zero_tolerance()) {
      set_preprocessor_zero_tolerance(from.preprocessor_zero_tolerance());
    }
    if (from.has_objective_lower_limit()) {
      set_objective_lower_limit(from.objective_lower_limit());
    }
    if (from.has_objective_upper_limit()) {
      set_objective_upper_limit(from.objective_upper_limit());
    }
    if (from.has_degenerate_ministep_factor()) {
      set_degenerate_ministep_factor(from.degenerate_ministep_factor());
    }
    if (from.has_random_seed()) {
      set_random_seed(from.random_seed());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_num_omp_threads()) {
      set_num_omp_threads(from.num_omp_threads());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlopParameters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlopParameters::CopyFrom(const GlopParameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlopParameters::IsInitialized() const {

  return true;
}

void GlopParameters::Swap(GlopParameters* other) {
  if (other != this) {
    std::swap(feasibility_rule_, other->feasibility_rule_);
    std::swap(optimization_rule_, other->optimization_rule_);
    std::swap(normalize_using_column_norm_, other->normalize_using_column_norm_);
    std::swap(use_nested_pricing_, other->use_nested_pricing_);
    std::swap(refactorization_threshold_, other->refactorization_threshold_);
    std::swap(recompute_reduced_costs_threshold_, other->recompute_reduced_costs_threshold_);
    std::swap(recompute_edges_norm_threshold_, other->recompute_edges_norm_threshold_);
    std::swap(primal_feasibility_tolerance_, other->primal_feasibility_tolerance_);
    std::swap(dual_feasibility_tolerance_, other->dual_feasibility_tolerance_);
    std::swap(ratio_test_zero_threshold_, other->ratio_test_zero_threshold_);
    std::swap(harris_tolerance_ratio_, other->harris_tolerance_ratio_);
    std::swap(small_pivot_threshold_, other->small_pivot_threshold_);
    std::swap(minimum_acceptable_pivot_, other->minimum_acceptable_pivot_);
    std::swap(use_scaling_, other->use_scaling_);
    std::swap(initial_basis_, other->initial_basis_);
    std::swap(use_transposed_matrix_, other->use_transposed_matrix_);
    std::swap(basis_refactorization_period_, other->basis_refactorization_period_);
    std::swap(solve_dual_problem_, other->solve_dual_problem_);
    std::swap(dualizer_threshold_, other->dualizer_threshold_);
    std::swap(solution_feasibility_tolerance_, other->solution_feasibility_tolerance_);
    std::swap(provide_strong_optimal_guarantee_, other->provide_strong_optimal_guarantee_);
    std::swap(lu_factorization_pivot_threshold_, other->lu_factorization_pivot_threshold_);
    std::swap(max_time_in_seconds_, other->max_time_in_seconds_);
    std::swap(max_deterministic_time_, other->max_deterministic_time_);
    std::swap(max_number_of_iterations_, other->max_number_of_iterations_);
    std::swap(markowitz_zlatev_parameter_, other->markowitz_zlatev_parameter_);
    std::swap(markowitz_singularity_threshold_, other->markowitz_singularity_threshold_);
    std::swap(use_dual_simplex_, other->use_dual_simplex_);
    std::swap(allow_simplex_algorithm_change_, other->allow_simplex_algorithm_change_);
    std::swap(devex_weights_reset_period_, other->devex_weights_reset_period_);
    std::swap(use_preprocessing_, other->use_preprocessing_);
    std::swap(use_middle_product_form_update_, other->use_middle_product_form_update_);
    std::swap(initialize_devex_with_column_norms_, other->initialize_devex_with_column_norms_);
    std::swap(exploit_singleton_column_in_initial_basis_, other->exploit_singleton_column_in_initial_basis_);
    std::swap(dual_small_pivot_threshold_, other->dual_small_pivot_threshold_);
    std::swap(preprocessor_zero_tolerance_, other->preprocessor_zero_tolerance_);
    std::swap(objective_lower_limit_, other->objective_lower_limit_);
    std::swap(objective_upper_limit_, other->objective_upper_limit_);
    std::swap(degenerate_ministep_factor_, other->degenerate_ministep_factor_);
    std::swap(random_seed_, other->random_seed_);
    std::swap(num_omp_threads_, other->num_omp_threads_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlopParameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlopParameters_descriptor_;
  metadata.reflection = GlopParameters_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace glop
}  // namespace operations_research

// @@protoc_insertion_point(global_scope)
