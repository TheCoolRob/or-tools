// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph/flow_problem.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "graph/flow_problem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace operations_research {

namespace {

const ::google::protobuf::Descriptor* Arc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Arc_reflection_ = NULL;
const ::google::protobuf::Descriptor* Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlowModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlowModel_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FlowModel_ProblemType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_graph_2fflow_5fproblem_2eproto() {
  protobuf_AddDesc_graph_2fflow_5fproblem_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "graph/flow_problem.proto");
  GOOGLE_CHECK(file != NULL);
  Arc_descriptor_ = file->message_type(0);
  static const int Arc_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arc, tail_node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arc, head_node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arc, capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arc, unit_cost_),
  };
  Arc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Arc_descriptor_,
      Arc::default_instance_,
      Arc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Arc));
  Node_descriptor_ = file->message_type(1);
  static const int Node_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, supply_),
  };
  Node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Node_descriptor_,
      Node::default_instance_,
      Node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Node));
  FlowModel_descriptor_ = file->message_type(2);
  static const int FlowModel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowModel, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowModel, arc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowModel, problem_type_),
  };
  FlowModel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlowModel_descriptor_,
      FlowModel::default_instance_,
      FlowModel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowModel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowModel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlowModel));
  FlowModel_ProblemType_descriptor_ = FlowModel_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_graph_2fflow_5fproblem_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Arc_descriptor_, &Arc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Node_descriptor_, &Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlowModel_descriptor_, &FlowModel::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_graph_2fflow_5fproblem_2eproto() {
  delete Arc::default_instance_;
  delete Arc_reflection_;
  delete Node::default_instance_;
  delete Node_reflection_;
  delete FlowModel::default_instance_;
  delete FlowModel_reflection_;
}

void protobuf_AddDesc_graph_2fflow_5fproblem_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030graph/flow_problem.proto\022\023operations_r"
    "esearch\"\\\n\003Arc\022\024\n\014tail_node_id\030\001 \001(\003\022\024\n\014"
    "head_node_id\030\002 \001(\003\022\023\n\010capacity\030\003 \001(\003:\0011\022"
    "\024\n\tunit_cost\030\004 \001(\003:\0010\"%\n\004Node\022\n\n\002id\030\001 \001("
    "\003\022\021\n\006supply\030\002 \001(\003:\0010\"\367\001\n\tFlowModel\022\'\n\004no"
    "de\030\001 \003(\0132\031.operations_research.Node\022%\n\003a"
    "rc\030\002 \003(\0132\030.operations_research.Arc\022O\n\014pr"
    "oblem_type\030\003 \001(\0162*.operations_research.F"
    "lowModel.ProblemType:\rMIN_COST_FLOW\"I\n\013P"
    "roblemType\022\031\n\025LINEAR_SUM_ASSIGNMENT\020\000\022\014\n"
    "\010MAX_FLOW\020\001\022\021\n\rMIN_COST_FLOW\020\002", 430);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "graph/flow_problem.proto", &protobuf_RegisterTypes);
  Arc::default_instance_ = new Arc();
  Node::default_instance_ = new Node();
  FlowModel::default_instance_ = new FlowModel();
  Arc::default_instance_->InitAsDefaultInstance();
  Node::default_instance_->InitAsDefaultInstance();
  FlowModel::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_graph_2fflow_5fproblem_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_graph_2fflow_5fproblem_2eproto {
  StaticDescriptorInitializer_graph_2fflow_5fproblem_2eproto() {
    protobuf_AddDesc_graph_2fflow_5fproblem_2eproto();
  }
} static_descriptor_initializer_graph_2fflow_5fproblem_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Arc::kTailNodeIdFieldNumber;
const int Arc::kHeadNodeIdFieldNumber;
const int Arc::kCapacityFieldNumber;
const int Arc::kUnitCostFieldNumber;
#endif  // !_MSC_VER

Arc::Arc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.Arc)
}

void Arc::InitAsDefaultInstance() {
}

Arc::Arc(const Arc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.Arc)
}

void Arc::SharedCtor() {
  _cached_size_ = 0;
  tail_node_id_ = GOOGLE_LONGLONG(0);
  head_node_id_ = GOOGLE_LONGLONG(0);
  capacity_ = GOOGLE_LONGLONG(1);
  unit_cost_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Arc::~Arc() {
  // @@protoc_insertion_point(destructor:operations_research.Arc)
  SharedDtor();
}

void Arc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Arc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Arc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Arc_descriptor_;
}

const Arc& Arc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_graph_2fflow_5fproblem_2eproto();
  return *default_instance_;
}

Arc* Arc::default_instance_ = NULL;

Arc* Arc::New() const {
  return new Arc;
}

void Arc::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Arc*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(tail_node_id_, head_node_id_);
    capacity_ = GOOGLE_LONGLONG(1);
    unit_cost_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Arc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.Arc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 tail_node_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tail_node_id_)));
          set_has_tail_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_head_node_id;
        break;
      }

      // optional int64 head_node_id = 2;
      case 2: {
        if (tag == 16) {
         parse_head_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &head_node_id_)));
          set_has_head_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_capacity;
        break;
      }

      // optional int64 capacity = 3 [default = 1];
      case 3: {
        if (tag == 24) {
         parse_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &capacity_)));
          set_has_capacity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unit_cost;
        break;
      }

      // optional int64 unit_cost = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_unit_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unit_cost_)));
          set_has_unit_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.Arc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.Arc)
  return false;
#undef DO_
}

void Arc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.Arc)
  // optional int64 tail_node_id = 1;
  if (has_tail_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tail_node_id(), output);
  }

  // optional int64 head_node_id = 2;
  if (has_head_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->head_node_id(), output);
  }

  // optional int64 capacity = 3 [default = 1];
  if (has_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->capacity(), output);
  }

  // optional int64 unit_cost = 4 [default = 0];
  if (has_unit_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->unit_cost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.Arc)
}

::google::protobuf::uint8* Arc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.Arc)
  // optional int64 tail_node_id = 1;
  if (has_tail_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tail_node_id(), target);
  }

  // optional int64 head_node_id = 2;
  if (has_head_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->head_node_id(), target);
  }

  // optional int64 capacity = 3 [default = 1];
  if (has_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->capacity(), target);
  }

  // optional int64 unit_cost = 4 [default = 0];
  if (has_unit_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->unit_cost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.Arc)
  return target;
}

int Arc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 tail_node_id = 1;
    if (has_tail_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tail_node_id());
    }

    // optional int64 head_node_id = 2;
    if (has_head_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->head_node_id());
    }

    // optional int64 capacity = 3 [default = 1];
    if (has_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->capacity());
    }

    // optional int64 unit_cost = 4 [default = 0];
    if (has_unit_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->unit_cost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Arc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Arc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Arc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Arc::MergeFrom(const Arc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tail_node_id()) {
      set_tail_node_id(from.tail_node_id());
    }
    if (from.has_head_node_id()) {
      set_head_node_id(from.head_node_id());
    }
    if (from.has_capacity()) {
      set_capacity(from.capacity());
    }
    if (from.has_unit_cost()) {
      set_unit_cost(from.unit_cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Arc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Arc::CopyFrom(const Arc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Arc::IsInitialized() const {

  return true;
}

void Arc::Swap(Arc* other) {
  if (other != this) {
    std::swap(tail_node_id_, other->tail_node_id_);
    std::swap(head_node_id_, other->head_node_id_);
    std::swap(capacity_, other->capacity_);
    std::swap(unit_cost_, other->unit_cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Arc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Arc_descriptor_;
  metadata.reflection = Arc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Node::kIdFieldNumber;
const int Node::kSupplyFieldNumber;
#endif  // !_MSC_VER

Node::Node()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.Node)
}

void Node::InitAsDefaultInstance() {
}

Node::Node(const Node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.Node)
}

void Node::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  supply_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:operations_research.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_descriptor_;
}

const Node& Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_graph_2fflow_5fproblem_2eproto();
  return *default_instance_;
}

Node* Node::default_instance_ = NULL;

Node* Node::New() const {
  return new Node;
}

void Node::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Node*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, supply_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_supply;
        break;
      }

      // optional int64 supply = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_supply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &supply_)));
          set_has_supply();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.Node)
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 supply = 2 [default = 0];
  if (has_supply()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->supply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.Node)
}

::google::protobuf::uint8* Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.Node)
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int64 supply = 2 [default = 0];
  if (has_supply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->supply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.Node)
  return target;
}

int Node::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 supply = 2 [default = 0];
    if (has_supply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->supply());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_supply()) {
      set_supply(from.supply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {

  return true;
}

void Node::Swap(Node* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(supply_, other->supply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_descriptor_;
  metadata.reflection = Node_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FlowModel_ProblemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlowModel_ProblemType_descriptor_;
}
bool FlowModel_ProblemType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FlowModel_ProblemType FlowModel::LINEAR_SUM_ASSIGNMENT;
const FlowModel_ProblemType FlowModel::MAX_FLOW;
const FlowModel_ProblemType FlowModel::MIN_COST_FLOW;
const FlowModel_ProblemType FlowModel::ProblemType_MIN;
const FlowModel_ProblemType FlowModel::ProblemType_MAX;
const int FlowModel::ProblemType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FlowModel::kNodeFieldNumber;
const int FlowModel::kArcFieldNumber;
const int FlowModel::kProblemTypeFieldNumber;
#endif  // !_MSC_VER

FlowModel::FlowModel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.FlowModel)
}

void FlowModel::InitAsDefaultInstance() {
}

FlowModel::FlowModel(const FlowModel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:operations_research.FlowModel)
}

void FlowModel::SharedCtor() {
  _cached_size_ = 0;
  problem_type_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlowModel::~FlowModel() {
  // @@protoc_insertion_point(destructor:operations_research.FlowModel)
  SharedDtor();
}

void FlowModel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlowModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlowModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlowModel_descriptor_;
}

const FlowModel& FlowModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_graph_2fflow_5fproblem_2eproto();
  return *default_instance_;
}

FlowModel* FlowModel::default_instance_ = NULL;

FlowModel* FlowModel::New() const {
  return new FlowModel;
}

void FlowModel::Clear() {
  problem_type_ = 2;
  node_.Clear();
  arc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlowModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.FlowModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .operations_research.Node node = 1;
      case 1: {
        if (tag == 10) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_node;
        if (input->ExpectTag(18)) goto parse_arc;
        break;
      }

      // repeated .operations_research.Arc arc = 2;
      case 2: {
        if (tag == 18) {
         parse_arc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_arc;
        if (input->ExpectTag(24)) goto parse_problem_type;
        break;
      }

      // optional .operations_research.FlowModel.ProblemType problem_type = 3 [default = MIN_COST_FLOW];
      case 3: {
        if (tag == 24) {
         parse_problem_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::operations_research::FlowModel_ProblemType_IsValid(value)) {
            set_problem_type(static_cast< ::operations_research::FlowModel_ProblemType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.FlowModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.FlowModel)
  return false;
#undef DO_
}

void FlowModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.FlowModel)
  // repeated .operations_research.Node node = 1;
  for (int i = 0; i < this->node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(i), output);
  }

  // repeated .operations_research.Arc arc = 2;
  for (int i = 0; i < this->arc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arc(i), output);
  }

  // optional .operations_research.FlowModel.ProblemType problem_type = 3 [default = MIN_COST_FLOW];
  if (has_problem_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->problem_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.FlowModel)
}

::google::protobuf::uint8* FlowModel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.FlowModel)
  // repeated .operations_research.Node node = 1;
  for (int i = 0; i < this->node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node(i), target);
  }

  // repeated .operations_research.Arc arc = 2;
  for (int i = 0; i < this->arc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arc(i), target);
  }

  // optional .operations_research.FlowModel.ProblemType problem_type = 3 [default = MIN_COST_FLOW];
  if (has_problem_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->problem_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.FlowModel)
  return target;
}

int FlowModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .operations_research.FlowModel.ProblemType problem_type = 3 [default = MIN_COST_FLOW];
    if (has_problem_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->problem_type());
    }

  }
  // repeated .operations_research.Node node = 1;
  total_size += 1 * this->node_size();
  for (int i = 0; i < this->node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node(i));
  }

  // repeated .operations_research.Arc arc = 2;
  total_size += 1 * this->arc_size();
  for (int i = 0; i < this->arc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arc(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlowModel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlowModel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlowModel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlowModel::MergeFrom(const FlowModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_.MergeFrom(from.node_);
  arc_.MergeFrom(from.arc_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_problem_type()) {
      set_problem_type(from.problem_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlowModel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowModel::CopyFrom(const FlowModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowModel::IsInitialized() const {

  return true;
}

void FlowModel::Swap(FlowModel* other) {
  if (other != this) {
    node_.Swap(&other->node_);
    arc_.Swap(&other->arc_);
    std::swap(problem_type_, other->problem_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlowModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlowModel_descriptor_;
  metadata.reflection = FlowModel_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace operations_research

// @@protoc_insertion_point(global_scope)
